{"version":3,"sources":["socket/index.ts","pages/login/index.tsx","hooks/use-login-socket.ts","components/room/index.tsx","pages/loby/index.tsx","hooks/use-loby-socket.ts","pages/room-loby/index.tsx","components/user/index.tsx","components/message/index.tsx","components/chat/index.tsx","components/interface/index.tsx","components/loading-spinner/index.tsx","app.tsx","hooks/use-login.ts","hooks/use-users.ts","hooks/use-room.ts","hooks/use-rooms.ts","hooks/use-chat.ts","hooks/use-select-user.ts","hooks/use-app-socket.ts","index.tsx"],"names":["socket","io","autoConnect","onAny","event","SLogin","styled","section","Login","setLogin","ref","useRef","connectSocekt","useCallback","userName","auth","connect","useLoginSocket","onSubmitHandler","e","preventDefault","current","value","onSubmit","type","autoComplete","placeholder","SRoom","article","isJoined","Room","room","enterRoom","joinRoom","joinRoomHandler","roomID","useMemo","users","length","primaryUser","size","className","onClick","roomName","hasNewMessages","SInterface","SLobyChildren","Loby","props","chats","rooms","setRooms","setRoom","emitMessage","interfaceLayout","SE","setUsers","setChat","selectedUser","setSelectedUser","sendPublicMessage","content","emit","createRoom","useEffect","on","user","oldUsers","userID","oldChats","chat","isQuit","newUsers","Object","values","forEach","message","off","onRoomCreated","oldRooms","creater","onDeleteRoom","newRooms","useLobySocket","emitMessageHandler","iterableRooms","sort","a","b","iterableUsers","self","messages","recent","cloneElement","map","RoomLoby","selectedRoom","leaveRoom","sendRoomMessage","goLoby","goLobbyHandler","leaveRoomHandler","SArticle","isTarget","User","togglePrivateMessage","onClickHandler","Message","from","to","fromSelf","title","id","SChats","Chat","target","element","document","querySelector","scrollTo","scrollHeight","i","SUsers","SChatAct","Interface","p","children","LoadingSpinner","SMain","main","App","useState","isLogin","setState","bool","useLogin","useUsers","useRoom","useRooms","useChat","useSelectUser","toggleRoom","sendPrivateMessage","combinedRooms","combinedUsers","onJoinRoom","roomUsers","targetRoom","joinSelf","roomUser","push","onLeaveRoom","onRoomMessage","onStorePrivateMessage","onCountingPrivateMessage","targetUser","Date","disconnect","useAppSocket","sendMessage","args","toggle","InterfaceLayout","isUsers","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e974c88b.chunk.js","sourcesContent":["import { io, Socket } from \"socket.io-client\";\r\ninterface ISocet extends Socket {\r\n  userID?: string;\r\n}\r\n\r\nconst url = \"https://web-chat-sangmin-server.herokuapp.com/web-chat\";\r\n// const url = \"http://localhost:3001/web-chat\";\r\n\r\nexport const socket: ISocet = io(url, { autoConnect: false });\r\n\r\nsocket.onAny((event, ...args) => {\r\n  // console.log(event, args);\r\n});\r\n","import { useCallback, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLoginSocket } from \"hooks/use-login-socket\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nconst Login = ({ setLogin }: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const { connectSocekt } = useLoginSocket({ setLogin });\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const userName = ref?.current?.value;\r\n      if (userName) connectSocekt(userName);\r\n    },\r\n    [connectSocekt, ref]\r\n  );\r\n\r\n  return (\r\n    <SLogin>\r\n      <h2>Web Chat</h2>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input\r\n          ref={ref}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"user name...\"\r\n        />\r\n        <button>입장</button>\r\n      </form>\r\n    </SLogin>\r\n  );\r\n};\r\n\r\nconst SLogin = styled.section`\r\n  width: 300px;\r\n  position: relative;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  form {\r\n    border-bottom: 1px solid #222;\r\n    input {\r\n      display: inline-block;\r\n      width: 80%;\r\n      border: 0;\r\n      outline: none;\r\n      padding: 0.1rem 0.3rem;\r\n    }\r\n    button {\r\n      display: inline-block;\r\n      width: 20%;\r\n      padding: 0.1rem 0.3rem;\r\n      border: 0;\r\n      background: #222;\r\n      border-radius: 3px 3px 0 0;\r\n      color: #eee;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import { useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nexport function useLoginSocket({ setLogin }: Props) {\r\n  const connectSocekt = useCallback(\r\n    userName => {\r\n      setLogin(true);\r\n      socket.auth = { userName };\r\n      socket.connect();\r\n    },\r\n    [setLogin]\r\n  );\r\n\r\n  return {\r\n    connectSocekt,\r\n  };\r\n}\r\n","import React, { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface userProps {\r\n  userName: string;\r\n}\r\n\r\ninterface RoomProps<userType> {\r\n  isJoined: boolean;\r\n  roomID: string;\r\n  users: userType[];\r\n  roomName: string;\r\n  hasNewMessages: number;\r\n}\r\n\r\ninterface Props<roomType> {\r\n  room: roomType;\r\n  enterRoom(T: string): void;\r\n  joinRoom(T: string): void;\r\n}\r\n\r\nconst Room = <\r\n  roomType extends RoomProps<userType>,\r\n  userType extends userProps\r\n>({\r\n  room,\r\n  enterRoom,\r\n  joinRoom,\r\n}: Props<roomType>) => {\r\n  const joinRoomHandler = useCallback(() => {\r\n    if (room.isJoined) return enterRoom(room.roomID);\r\n    joinRoom(room.roomID);\r\n  }, [enterRoom, joinRoom, room]);\r\n\r\n  const [primaryUser, size] = useMemo(() => {\r\n    if (!room.isJoined) return [null, null];\r\n    const primary = room.users[0].userName;\r\n    const size = room.users.length < 2 ? null : room.users.length - 1;\r\n    return [primary, size];\r\n  }, [room.users, room.isJoined]);\r\n\r\n  return (\r\n    <SRoom className=\"room\" isJoined={room.isJoined} onClick={joinRoomHandler}>\r\n      <div className=\"room-name\">{room.roomName}</div>\r\n      {room.isJoined && (\r\n        <div className=\"room-info\">\r\n          <div className=\"room-users\">\r\n            {primaryUser} {size && `+${size}`}\r\n          </div>\r\n          {room.hasNewMessages !== 0 && (\r\n            <div className=\"room-hasNewMessages\">{room.hasNewMessages}</div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {!room.isJoined && <div>대화방에 참여하세요!</div>}\r\n    </SRoom>\r\n  );\r\n};\r\n\r\nconst SRoom = styled.article<{ isJoined: boolean }>`\r\n  width : calc(98% / 3);\r\n  @media screen and (max-width: 600px) {\r\n    width: calc(98% / 2);\r\n  }\r\n  height : fit-content;\r\n  border : 1px solid;\r\n  border-color : ${({ isJoined }) => (isJoined ? \"tomato\" : \"#444\")}}\r\n  border-radius : 3px;\r\n  margin-right : 1%;\r\n  padding : .2rem .4rem;\r\n  cursor : pointer;\r\n  * {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n  .room-info {\r\n    display : flex;\r\n    justify-content : space-between;\r\n    .room-hasNewMessages {\r\n      background-color: purple;\r\n      padding: 0.1rem 0.3rem;\r\n      border-radius: 3px;\r\n      font-size: 0.85rem;\r\n      color : white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Room;\r\n","import { cloneElement, ReactElement, useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUsers, IUser, IUserID } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms, IRoom } from \"types/room\";\r\nimport { useLobySocket } from \"hooks/use-loby-socket\";\r\nimport { Debounce } from \"util/debounce\";\r\nimport Room from \"components/room/index\";\r\n\r\ntype emitMessage = (T: IChat) => void;\r\n\r\ninterface Props {\r\n  interfaceLayout: ReactElement;\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  chats: IChat[];\r\n  setChat(T: any): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: IUser): void;\r\n  rooms: IRooms;\r\n  setRoom(T: string): void;\r\n  setRooms(T: IRooms): void;\r\n  emitMessage(T: emitMessage, U: IChat): void;\r\n}\r\n\r\nconst Loby = (props: Props) => {\r\n  const {\r\n    chats,\r\n    rooms,\r\n    setRooms,\r\n    setRoom,\r\n    emitMessage,\r\n    users,\r\n    interfaceLayout,\r\n  } = props;\r\n\r\n  const SE = useLobySocket(props);\r\n\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(SE.sendPublicMessage, { content });\r\n    },\r\n    [emitMessage, SE]\r\n  );\r\n\r\n  const enterRoom = useCallback(\r\n    roomID => {\r\n      const newRooms = { ...rooms };\r\n      newRooms[roomID] = { ...rooms[roomID], hasNewMessages: 0 };\r\n      setRooms(newRooms);\r\n      setRoom(roomID);\r\n    },\r\n    [rooms, setRoom, setRooms]\r\n  );\r\n\r\n  const iterableRooms = useMemo(\r\n    () =>\r\n      Object.values(rooms).sort((a, b) => {\r\n        if (a.isJoined) return -1;\r\n        return 0;\r\n      }),\r\n    [rooms]\r\n  );\r\n  const iterableUsers = useMemo(\r\n    () =>\r\n      Object.values(users).sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.messages.recent > b.messages.recent) return -1;\r\n        return 0;\r\n      }),\r\n    [users]\r\n  );\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats,\r\n          iterableUsers,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <section className=\"button-container\">\r\n            <button onClick={SE.createRoom}>방 만들기</button>\r\n          </section>\r\n          <section className=\"created-rooms\">\r\n            {iterableRooms.map(room => (\r\n              <Room<IRoom, IUserID>\r\n                key={room.roomID}\r\n                room={room}\r\n                enterRoom={enterRoom}\r\n                joinRoom={SE.joinRoom}\r\n              />\r\n            ))}\r\n          </section>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: 40%;\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  height: 60%;\r\n  padding: 0.5rem;\r\n  .created-rooms {\r\n    height: calc(99% - 30.1px);\r\n    padding-top: 0.5rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loby;\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRoom, IRooms } from \"types/room\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  // setUsers(T: IUsers): void;\r\n  setUsers(T: any): void;\r\n  // setChat(T: IChat): void;\r\n  setChat(T: any): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: null | IUser): void;\r\n  setRoom(T: null | string): void;\r\n  setRooms(T: any): void;\r\n  rooms: IRooms;\r\n}\r\n\r\nexport function useLobySocket({\r\n  setUsers,\r\n  setChat,\r\n  selectedUser,\r\n  setSelectedUser,\r\n  setRooms,\r\n  rooms,\r\n}: Props) {\r\n  const sendPublicMessage = useCallback(({ content }) => {\r\n    socket.emit(\"public message\", content);\r\n  }, []);\r\n\r\n  const createRoom = useCallback(() => {\r\n    socket.emit(\"create room\");\r\n  }, []);\r\n\r\n  const joinRoom = useCallback(roomID => {\r\n    socket.emit(\"join room\", roomID);\r\n  }, []);\r\n\r\n  // 로비 내부 채팅\r\n  useEffect(() => {\r\n    socket.on(\"user connected\", user => {\r\n      setUsers((oldUsers: any) => {\r\n        return { ...oldUsers, [user.userID]: user };\r\n      });\r\n      setChat((oldChats: any) => {\r\n        const chat = { content: `${user.userName}님이 입장하셨습니다.` };\r\n        return [...oldChats, chat];\r\n      });\r\n    });\r\n\r\n    socket.on(\"user disconnected\", ({ userID, userName }) => {\r\n      const isQuit = selectedUser?.userID === userID ? true : false;\r\n      let content = `${userName}님이 퇴장하셨습니다.`;\r\n      if (isQuit) {\r\n        content = `귓속말 대상인 ${userName}님이 퇴장하셨습니다.`;\r\n        setSelectedUser(null);\r\n      }\r\n      setChat((oldChats: any) => {\r\n        const chat = { content };\r\n        return [...oldChats, chat];\r\n      });\r\n      setUsers((oldUsers: any) => {\r\n        const newUsers: IUsers = {};\r\n        const userVals: any = Object.values(oldUsers);\r\n        userVals.forEach((user: any) => {\r\n          if (user.userID !== userID) newUsers[user.userID] = user;\r\n        });\r\n        return newUsers;\r\n      });\r\n    });\r\n\r\n    socket.on(\"public message\", message => {\r\n      setChat((oldChats: any) => {\r\n        const chat = { ...message };\r\n        return [...oldChats, chat];\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"user connected\");\r\n      socket.off(\"user disconnected\");\r\n      socket.off(\"public message\");\r\n    };\r\n  }, [setChat, setUsers, setSelectedUser, selectedUser]);\r\n\r\n  const onRoomCreated = useCallback((room: IRoom) => {\r\n    setRooms((oldRooms: any) => {\r\n      if (room.creater === socket.userID) joinRoom(room.roomID);\r\n      return { ...oldRooms, [room.roomID]: room };\r\n    });\r\n  }, []);\r\n\r\n  const onDeleteRoom = useCallback(\r\n    roomID => {\r\n      setRooms((oldRooms: any) => {\r\n        const newRooms: IRooms = {};\r\n        const roomVals: IRoom[] = Object.values(oldRooms);\r\n        roomVals.forEach(room => {\r\n          if (room.roomID === roomID) return;\r\n          newRooms[room.roomID] = room;\r\n        });\r\n        return newRooms;\r\n      });\r\n    },\r\n    [setRooms]\r\n  );\r\n\r\n  // 방관련\r\n\r\n  useEffect(() => {\r\n    socket.on(\"room created\", room => {\r\n      onRoomCreated(room);\r\n    });\r\n\r\n    socket.on(\"delete room\", roomID => {\r\n      onDeleteRoom(roomID);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"room created\");\r\n      socket.off(\"delete room\");\r\n    };\r\n  }, [onRoomCreated, onDeleteRoom]);\r\n\r\n  return {\r\n    sendPublicMessage,\r\n    createRoom,\r\n    joinRoom,\r\n  };\r\n}\r\n","import { useCallback, useMemo, cloneElement, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IRoom } from \"types/room\";\r\n\r\ntype emitMessage = (T: string, U: string) => void;\r\n\r\ninterface Props {\r\n  setRoom(T: null): void;\r\n  interfaceLayout: ReactElement;\r\n  emitMessage(T: emitMessage, U: { content: string; roomID: string }): void;\r\n  selectedRoom: IRoom;\r\n  leaveRoom(T: string): void;\r\n  sendRoomMessage(T: string, U: string): void;\r\n  goLoby(): void;\r\n}\r\n\r\nconst RoomLoby = ({\r\n  setRoom,\r\n  interfaceLayout,\r\n  emitMessage,\r\n  selectedRoom,\r\n  leaveRoom,\r\n  sendRoomMessage,\r\n  goLoby,\r\n}: Props) => {\r\n  const roomID = useMemo(() => selectedRoom.roomID, [selectedRoom.roomID]);\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(sendRoomMessage, { content, roomID });\r\n    },\r\n    [emitMessage, sendRoomMessage, roomID]\r\n  );\r\n\r\n  const goLobbyHandler = useCallback(() => {\r\n    setRoom(null);\r\n    goLoby();\r\n  }, [setRoom, goLoby]);\r\n\r\n  const leaveRoomHandler = useCallback(() => {\r\n    leaveRoom(roomID);\r\n    goLoby();\r\n  }, [leaveRoom, roomID, goLoby]);\r\n\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats: selectedRoom.messages,\r\n          iterableUsers: selectedRoom.users,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <div className=\"button-container\">\r\n            <button onClick={leaveRoomHandler}>나가기</button>\r\n            <button onClick={goLobbyHandler}>로비로 이동</button>\r\n          </div>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: calc(100% - 46.1px);\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  padding: 0.5rem;\r\n  height: fit-content;\r\n`;\r\n\r\nexport default RoomLoby;\r\n","import { useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface userProps {\r\n  userID: string;\r\n  userName: string;\r\n  messages: {\r\n    hasNewMessages: number;\r\n  };\r\n}\r\n\r\ninterface Props<userType> {\r\n  user: userType;\r\n  togglePrivateMessage(T: string): void;\r\n  selectedUser: null | userType;\r\n}\r\n\r\nconst User = <userType extends Partial<userProps>>({\r\n  user,\r\n  togglePrivateMessage,\r\n  selectedUser,\r\n}: Props<userType>) => {\r\n  const onClickHandler = useCallback(() => {\r\n    if (!user.userID) return;\r\n    togglePrivateMessage(user.userID);\r\n  }, [togglePrivateMessage, user]);\r\n\r\n  return (\r\n    <SArticle\r\n      isTarget={user.userID === selectedUser?.userID}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div className=\"user-name\">{user.userName}</div>\r\n      {user.messages && user.messages.hasNewMessages !== 0 && (\r\n        <div className=\"messages-hasNewMessages\">\r\n          {user.messages.hasNewMessages}\r\n        </div>\r\n      )}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ isTarget: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-item: center;\r\n  ${({ isTarget }) =>\r\n    isTarget\r\n      ? \"background-color : #fff; color : black\"\r\n      : \"background-color : transparent; color : #f2f2f2\"};\r\n  padding: 0.2rem 0.4rem;\r\n  .messages-hasNewMessages {\r\n    background-color: purple;\r\n    padding: 0.1rem 0.3rem;\r\n    border-radius: 3px;\r\n    font-size: 0.85rem;\r\n  }\r\n`;\r\n\r\nexport default User;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface UserProps {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface MessageProps {\r\n  content: string;\r\n  from: UserProps;\r\n  to: UserProps;\r\n  fromSelf: string;\r\n}\r\n\r\ninterface Props extends Partial<MessageProps> {\r\n  togglePrivateMessage(T: string): void;\r\n}\r\n\r\nconst Message = ({\r\n  content,\r\n  from,\r\n  to,\r\n  fromSelf,\r\n  togglePrivateMessage,\r\n}: Props) => {\r\n  const [title, type] = useMemo(() => {\r\n    if (!to && !from) return [\"공지\", 0];\r\n    if (!to) return [from?.userName, 1];\r\n    if (fromSelf) return [`당신이 ${to.userName}에게`, 2];\r\n    if (!fromSelf) return [`${from?.userName}님이 당신에게`, 2];\r\n    return [null, 1];\r\n  }, [from, to, fromSelf]);\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    if (!to || !from) return;\r\n    const id = fromSelf ? to.userID : from.userID;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, fromSelf, from, to]);\r\n\r\n  return (\r\n    <SArticle type={type} onClick={onClickHandler}>\r\n      <b>{title}</b> : {content}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ type: number }>`\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n  color: ${({ type }) => {\r\n    const arr = [\"green\", \"black\", \"purple\"];\r\n    return arr[type];\r\n  }};\r\n  cursor: ${({ type }) => (type === 2 ? \"pointer\" : \"normal\")};\r\n`;\r\n\r\nexport default Message;\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"components/message/index\";\r\n\r\ninterface userProps {\r\n  userID: string;\r\n  userName: string;\r\n}\r\n\r\ninterface Props<userType, chatType> {\r\n  chats: chatType[];\r\n  emitMessage(T: string): void;\r\n  selectedUser: userType | null;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nconst Chat = <userType extends Partial<userProps>, chatType>({\r\n  chats,\r\n  emitMessage,\r\n  selectedUser,\r\n  togglePrivateMessage,\r\n}: Props<userType, chatType>) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const message = ref?.current?.value;\r\n      if (!message) return;\r\n      emitMessage(message);\r\n      e.target[0].value = \"\";\r\n    },\r\n    [emitMessage]\r\n  );\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    const id = selectedUser?.userID ?? null;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    const element = document.querySelector(\".chats\");\r\n    element?.scrollTo(0, element.scrollHeight);\r\n  }, [chats]);\r\n\r\n  return (\r\n    <SChats className=\"chat-area\">\r\n      <div className=\"chats\">\r\n        {chats.map((chat, i) => (\r\n          <Message\r\n            key={`chat ${i}`}\r\n            {...chat}\r\n            togglePrivateMessage={togglePrivateMessage}\r\n          />\r\n        ))}\r\n      </div>\r\n      <form onSubmit={onSubmitHandler}>\r\n        {selectedUser && (\r\n          <b className=\"private-message\" onClick={onClickHandler}>\r\n            {selectedUser.userName} 에게\r\n          </b>\r\n        )}\r\n        {!selectedUser && <b>모두에게</b>}\r\n        <input ref={ref} type=\"text\" />\r\n        <button>입력</button>\r\n      </form>\r\n    </SChats>\r\n  );\r\n};\r\n\r\nconst SChats = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  .chats {\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 36.1px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    padding: 0.4rem;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n  form {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 36px;\r\n    background: #222;\r\n    display: flex;\r\n    align-items: center;\r\n    b {\r\n      display: inline-block;\r\n      width: 20%;\r\n      background-color: #222;\r\n      border-radius: 6px 0 0 6px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      color: #fff;\r\n      padding-left: 0.3rem;\r\n      &.private-message {\r\n        color: rgba(245, 81, 226, 1);\r\n      }\r\n    }\r\n    input {\r\n      border: 0;\r\n      width: 70%;\r\n      padding: 0.2rem 0.4rem;\r\n      outline: none;\r\n      border-radius: 6px;\r\n    }\r\n    button {\r\n      border: 0;\r\n      background: none;\r\n      width: 10%;\r\n      color: #fff;\r\n      cursor: pointer;\r\n    }\r\n    * {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport User from \"components/user/index\";\r\nimport { JsxChild } from \"typescript\";\r\nimport Chat from \"components/chat/index\";\r\n\r\ninterface userProps {\r\n  userID: string;\r\n}\r\n\r\ninterface Props<userType, usersType, chatType> {\r\n  selectedUser: null | userType;\r\n  togglePrivateMessage(T: string): void;\r\n  users: usersType;\r\n  setUsers(T: usersType): void;\r\n  setSelectedUser(T: userType): void;\r\n  chats?: chatType[];\r\n  iterableUsers?: userType[];\r\n  emitMessageHandler?(T: string): void;\r\n  children?: JsxChild;\r\n}\r\n\r\nconst Interface = <userType extends userProps, usersType, chatType>(\r\n  p: Props<userType, usersType, chatType>\r\n) => {\r\n  return (\r\n    <>\r\n      <SUsers className=\"users\">\r\n        {(p.iterableUsers as userType[]).map((user: userType) => (\r\n          <User<userType>\r\n            key={user.userID}\r\n            user={user}\r\n            togglePrivateMessage={p.togglePrivateMessage}\r\n            selectedUser={p.selectedUser}\r\n          />\r\n        ))}\r\n      </SUsers>\r\n      <SChatAct>\r\n        {p.children}\r\n        <Chat<userType, chatType>\r\n          chats={p.chats as chatType[]}\r\n          emitMessage={p.emitMessageHandler as (T: string) => void}\r\n          selectedUser={p.selectedUser}\r\n          togglePrivateMessage={p.togglePrivateMessage}\r\n        />\r\n      </SChatAct>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SUsers = styled.section`\r\n  width: 20%;\r\n  height: 100%;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  background: #222;\r\n`;\r\n\r\nconst SChatAct = styled.section`\r\n  width: 80%;\r\n  height : 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  .button-container {\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    height : 30px;\r\n    button {\r\n      display: inline-block;\r\n      width: fit-content;\r\n      background: transparent;\r\n      border 1px solid #666;\r\n      border-radius : 3px;\r\n      padding : .1rem .3rem;\r\n      cursor : pointer;\r\n      margin-left : .3rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Interface;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst LoadingSpinner = () => {\r\n  return (\r\n    <div className=\"lds-spinner-wrap\">\r\n      <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useCallback, useMemo } from \"react\";\nimport { IUser, IUsers } from \"types/user\";\nimport { IChat } from \"types/chat\";\nimport \"styles/global.css\";\nimport styled from \"styled-components\";\nimport { useLogin } from \"hooks/use-login\";\nimport { useAppSocket } from \"hooks/use-app-socket\";\nimport { useUsers } from \"hooks/use-users\";\nimport { useChat } from \"hooks/use-chat\";\nimport { useRoom } from \"hooks/use-room\";\nimport { useRooms } from \"hooks/use-rooms\";\nimport { useSelectUser } from \"hooks/use-select-user\";\nimport { Debounce } from \"util/debounce\";\nimport Login from \"pages/login/index\";\nimport Loby from \"pages/loby\";\nimport RoomLoby from \"pages/room-loby\";\nimport Interface from \"components/interface/index\";\nimport LoadingSpinner from \"components/loading-spinner\";\n\nfunction App() {\n  const { isLogin, setLogin } = useLogin();\n  const { users, setUsers } = useUsers();\n  const { room, setRoom } = useRoom();\n  const { rooms, setRooms } = useRooms();\n  const { chats, setChat } = useChat();\n  const { selectedUser, setSelectedUser } = useSelectUser();\n\n  const toggleRoom = useCallback(\n    roomID => {\n      setRoom(roomID);\n      setSelectedUser(null);\n    },\n    [setSelectedUser, setRoom]\n  );\n\n  const SE = useAppSocket({\n    users,\n    setUsers,\n    rooms,\n    setRooms,\n    room,\n    setRoom: toggleRoom,\n    setChat,\n    selectedUser,\n  });\n\n  const selectedRoom = useMemo(() => {\n    if (!room) return;\n    return rooms[room];\n  }, [rooms, room]);\n\n  const emitMessage = useCallback(\n    (sendMessage, args) => {\n      if (selectedUser)\n        SE.sendPrivateMessage({ content: args.content, to: selectedUser });\n      if (!selectedUser) sendMessage(args);\n    },\n    [selectedUser, SE]\n  );\n\n  const togglePrivateMessage = useCallback(\n    userID => {\n      const user = users[userID] ?? null;\n      if (!user) return setSelectedUser(null);\n      if (user.self) return;\n      const toggle = selectedUser?.userID === user.userID ? null : { ...user };\n      const newUsers = { ...users };\n      newUsers[user.userID].messages.hasNewMessages = 0;\n      setSelectedUser(toggle);\n      setUsers(newUsers);\n    },\n    [setSelectedUser, selectedUser, users, setUsers]\n  );\n\n  const InterfaceLayout = (\n    <Interface<IUser, IUsers, IChat>\n      selectedUser={selectedUser}\n      togglePrivateMessage={togglePrivateMessage}\n      users={users}\n      setUsers={setUsers}\n      setSelectedUser={setSelectedUser}\n    />\n  );\n\n  const isUsers = useMemo(() => Object.values(users).length, [users]);\n\n  return (\n    <div className=\"app\">\n      {isLogin && isUsers === 0 && <LoadingSpinner />}\n      <SMain>\n        {!isLogin && <Login setLogin={setLogin} />}\n        {isLogin && selectedRoom && (\n          <RoomLoby\n            setRoom={toggleRoom}\n            interfaceLayout={InterfaceLayout}\n            emitMessage={emitMessage}\n            selectedRoom={selectedRoom}\n            leaveRoom={SE.leaveRoom}\n            sendRoomMessage={SE.sendRoomMessage}\n            goLoby={SE.goLoby}\n          />\n        )}\n        {isLogin && !selectedRoom && users && (\n          <Loby\n            interfaceLayout={InterfaceLayout}\n            setRoom={toggleRoom}\n            selectedUser={selectedUser}\n            emitMessage={emitMessage}\n            users={users}\n            setUsers={setUsers}\n            setSelectedUser={setSelectedUser}\n            chats={chats}\n            setChat={setChat}\n            setRooms={setRooms}\n            rooms={rooms}\n          />\n        )}\n      </SMain>\n    </div>\n  );\n}\n\nconst SMain = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default App;\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useLogin() {\r\n  const [isLogin, setState] = useState(false);\r\n\r\n  const setLogin = useCallback(\r\n    bool => {\r\n      setState(bool);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { isLogin, setLogin };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUsers } from \"types/user\";\r\n\r\nexport function useUsers() {\r\n  const [users, setUsers] = useState<IUsers>({});\r\n\r\n  // const setUsers = useCallback(\r\n  //   (users: IUsers) => {\r\n  //     setState(users);\r\n  //   },\r\n  //   [setState]\r\n  // );\r\n\r\n  return { users, setUsers };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useRoom() {\r\n  const [room, setState] = useState<null | string>(null);\r\n\r\n  const setRoom = useCallback(\r\n    (roomID: null | string) => {\r\n      setState(roomID);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { room, setRoom };\r\n}\r\n","import { useState, useCallback } from \"react\";\r\nimport { IRooms } from \"types/room\";\r\n\r\nexport function useRooms() {\r\n  const [rooms, setRooms] = useState<IRooms>({});\r\n\r\n  // const setRooms = useCallback(\r\n  //   (rooms: IRooms) => {\r\n  //     setState({ ...rooms });\r\n  //   },\r\n  //   [setState]\r\n  // );\r\n\r\n  return { rooms, setRooms };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IChat } from \"types/chat\";\r\n\r\nexport function useChat() {\r\n  const [chats, setChat] = useState<IChat[]>([]);\r\n\r\n  // const setChat = useCallback(\r\n  //   (chat: IChat) => {\r\n  //     setState([...chats, chat]);\r\n  //   },\r\n  //   [setState, chats]\r\n  // );\r\n\r\n  return { chats, setChat };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUser } from \"types/user\";\r\n\r\nexport function useSelectUser() {\r\n  const [selectedUser, setState] = useState<null | IUser>(null);\r\n\r\n  const setSelectedUser = useCallback(\r\n    (user: null | IUser) => {\r\n      setState(user);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { selectedUser, setSelectedUser };\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms, IRoom } from \"types/room\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  setUsers(T: any): void;\r\n  rooms: IRooms;\r\n  setRooms(T: any): void;\r\n  room: null | string;\r\n  setRoom(T: null | string): void;\r\n  setChat(T: any): void;\r\n  selectedUser: IUser | null;\r\n}\r\n\r\nexport function useAppSocket({\r\n  setUsers,\r\n  setRooms,\r\n  room,\r\n  setRoom,\r\n  setChat,\r\n  selectedUser,\r\n}: Props) {\r\n  // 방을 나갈 때, 클라이언트에 저장되어있는 방 정보를 초기화하고 새롭게 받아오도록 처리\r\n  const leaveRoom = useCallback(\r\n    roomID => {\r\n      setRoom(null);\r\n\r\n      setRooms((oldRooms: any) => {\r\n        const newRooms: IRooms = {};\r\n        const roomVals: any = Object.values(oldRooms);\r\n        roomVals.forEach((room: any) => {\r\n          if (room.roomID !== roomID) newRooms[room.roomID] = room;\r\n        });\r\n        return newRooms;\r\n      });\r\n      // setRooms(newRooms);\r\n      socket.emit(\"leave room\", roomID);\r\n    },\r\n    [setRoom, setRooms]\r\n  );\r\n\r\n  const goLoby = useCallback(() => {\r\n    socket.emit(\"go loby\");\r\n  }, []);\r\n\r\n  const sendRoomMessage = useCallback(({ content, roomID }) => {\r\n    socket.emit(\"room message\", { content, roomID });\r\n  }, []);\r\n\r\n  const sendPrivateMessage = useCallback(content => {\r\n    socket.emit(\"private message\", content);\r\n  }, []);\r\n\r\n  // 초기 유저리스트, 방리스트 수령, 로비로 이동시 새롭게 추가or제거된 유저나 방 수령\r\n  useEffect(() => {\r\n    socket.on(\"users\", (users: IUser[]) => {\r\n      const newUsers: IUsers = {};\r\n      users.forEach(user => {\r\n        user.self = false;\r\n        if (user.userID === socket.userID) user.self = true;\r\n        newUsers[user.userID] = user;\r\n      });\r\n      setUsers(newUsers);\r\n    });\r\n\r\n    socket.on(\"rooms\", (rooms: IRoom[]) => {\r\n      const newRooms: IRooms = {};\r\n      rooms.forEach(room => (newRooms[room.roomID] = room));\r\n      setRooms(newRooms);\r\n    });\r\n\r\n    socket.on(\"go loby\", ({ newUsers, newRooms }) => {\r\n      setRooms((oldRooms: any) => {\r\n        const combinedRooms: IRooms = {};\r\n        newRooms.forEach((room: IRoom) => {\r\n          if (oldRooms[room.roomID])\r\n            combinedRooms[room.roomID] = oldRooms[room.roomID];\r\n          // 새로운 방 생성\r\n          if (!oldRooms[room.roomID]) combinedRooms[room.roomID] = room;\r\n\r\n          // 서버에서 받아온 방이 기존 rooms에 없다면 제거\r\n        });\r\n        return combinedRooms;\r\n      });\r\n\r\n      setUsers((oldUsers: any) => {\r\n        const combinedUsers: IUsers = {};\r\n        newUsers.forEach((user: IUser) => {\r\n          if (oldUsers[user.userID])\r\n            combinedUsers[user.userID] = oldUsers[user.userID];\r\n          if (!oldUsers[user.userID]) combinedUsers[user.userID] = user;\r\n        });\r\n        return combinedUsers;\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"users\");\r\n      socket.off(\"rooms\");\r\n      socket.off(\"go loby\");\r\n    };\r\n  }, [setRooms, setUsers]);\r\n\r\n  const onJoinRoom = useCallback(\r\n    ({ roomUsers, userID, userName, roomID }) => {\r\n      setRooms((oldRooms: any) => {\r\n        const targetRoom = { ...oldRooms[roomID] };\r\n        const joinSelf = socket.userID === userID;\r\n        targetRoom.isJoined = true;\r\n        const newUsers = roomUsers.map((roomUser: IUser) => {\r\n          roomUser.self = false;\r\n          if (roomUser.userID === socket.userID) roomUser.self = true;\r\n          return roomUser;\r\n        });\r\n\r\n        targetRoom.users = newUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 입장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...oldRooms, [roomID]: targetRoom };\r\n        if (joinSelf) setRoom(roomID);\r\n        return newRooms;\r\n      });\r\n    },\r\n    [setRoom, setRooms]\r\n  );\r\n\r\n  const onLeaveRoom = useCallback(\r\n    ({ roomUsers, userName, roomID }) => {\r\n      setRooms((oldRooms: any) => {\r\n        const targetRoom = { ...oldRooms[roomID] };\r\n        if (!targetRoom) return;\r\n        targetRoom.users = roomUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 퇴장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...oldRooms, [roomID]: targetRoom };\r\n        return newRooms;\r\n      });\r\n    },\r\n    [setRooms]\r\n  );\r\n\r\n  const onRoomMessage = useCallback(\r\n    ({ message, roomID }) => {\r\n      setRooms((oldRooms: any) => {\r\n        const targetRoom = { ...oldRooms[roomID] };\r\n        targetRoom.messages.push(message);\r\n        if (!room) targetRoom.hasNewMessages++;\r\n        const newRooms = { ...oldRooms, [roomID]: targetRoom };\r\n        return newRooms;\r\n      });\r\n    },\r\n    [setRooms, room]\r\n  );\r\n\r\n  // 룸 상태에 대한 감지는 지속적으로\r\n  useEffect(() => {\r\n    socket.on(\"join room\", ({ roomUsers, userID, userName, roomID }) => {\r\n      onJoinRoom({ roomUsers, userID, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"leave room\", ({ roomUsers, userName, roomID }) => {\r\n      onLeaveRoom({ roomUsers, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"room message\", ({ message, roomID }) => {\r\n      onRoomMessage({ message, roomID });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"join room\");\r\n      socket.off(\"leave room\");\r\n      socket.off(\"room message\");\r\n    };\r\n  }, [onJoinRoom, onLeaveRoom, onRoomMessage]);\r\n\r\n  const onStorePrivateMessage = useCallback(\r\n    (fromSelf, message) => {\r\n      setChat((oldChats: any) => {\r\n        const chat = { ...message, fromSelf };\r\n        return [...oldChats, chat];\r\n      });\r\n\r\n      if (!room) return;\r\n\r\n      setRooms((oldRooms: any) => {\r\n        const newRooms = { ...oldRooms };\r\n        newRooms[room].messages.push({ ...message, fromSelf });\r\n        return newRooms;\r\n      });\r\n    },\r\n    [setRooms, setChat, room]\r\n  );\r\n\r\n  const onCountingPrivateMessage = useCallback(\r\n    message => {\r\n      setUsers((oldUsers: any) => {\r\n        const newUsers = { ...oldUsers };\r\n        const targetUser = newUsers[message.from.userID];\r\n        if (selectedUser?.userID !== targetUser.userID) {\r\n          targetUser.messages.hasNewMessages++;\r\n          targetUser.messages.recent = new Date();\r\n        }\r\n        return newUsers;\r\n      });\r\n    },\r\n    [setUsers, selectedUser]\r\n  );\r\n\r\n  // 귓속말은 상시 감지\r\n  useEffect(() => {\r\n    socket.on(\"private message\", message => {\r\n      const fromSelf = message.from.userID === socket.userID ? true : false;\r\n      onStorePrivateMessage(fromSelf, message);\r\n      if (fromSelf) return;\r\n      onCountingPrivateMessage(message);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"private message\");\r\n    };\r\n  }, [onStorePrivateMessage, onCountingPrivateMessage]);\r\n\r\n  // userID 할당 및 소킷 종료\r\n  useEffect(() => {\r\n    socket.on(\"session\", userID => {\r\n      socket.userID = userID;\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    sendRoomMessage,\r\n    sendPrivateMessage,\r\n    leaveRoom,\r\n    goLoby,\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}