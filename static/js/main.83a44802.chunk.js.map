{"version":3,"sources":["socket/index.ts","pages/login/index.tsx","hooks/use-login-socket.ts","components/room/index.tsx","pages/loby/index.tsx","hooks/use-loby-socket.ts","pages/room-loby/index.tsx","util/debounce.ts","components/user/index.tsx","components/message/index.tsx","components/chat/index.tsx","components/interface/index.tsx","app.tsx","hooks/use-login.ts","hooks/use-users.ts","hooks/use-room.ts","hooks/use-rooms.ts","hooks/use-chat.ts","hooks/use-select-user.ts","hooks/use-app-socket.ts","index.tsx"],"names":["socket","io","autoConnect","onAny","event","SLogin","styled","section","Login","setLogin","ref","useRef","connectSocekt","useCallback","userName","auth","connect","useLoginSocket","onSubmitHandler","e","preventDefault","current","value","onSubmit","type","autoComplete","placeholder","SRoom","article","isJoined","Room","room","enterRoom","joinRoom","joinRoomHandler","roomID","useMemo","users","length","primaryUser","size","className","onClick","roomName","hasNewMessages","SInterface","SLobyChildren","Loby","props","chats","rooms","setRooms","setRoom","emitMessage","interfaceLayout","SE","setUsers","setChat","selectedUser","setSelectedUser","roomsDebounce","sendPublicMessage","content","emit","createRoom","useEffect","on","user","newUsers","userID","isQuit","Object","values","forEach","message","off","onRoomCreated","debounceAct","creater","newRooms","newState","onDeleteRoom","useLobySocket","emitMessageHandler","iterableRooms","sort","a","b","iterableUsers","self","messages","recent","cloneElement","map","RoomLoby","selectedRoom","leaveRoom","sendRoomMessage","goLoby","goLobbyHandler","leaveRoomHandler","Debounce","state","setState","t","timer","arr","time","this","work","console","log","clearTimeout","push","setTimeout","doWork","SArticle","isTarget","User","togglePrivateMessage","onClickHandler","Message","from","to","fromSelf","title","id","SChats","Chat","target","element","document","querySelector","scrollTo","scrollHeight","chat","i","SUsers","SChatAct","Interface","p","children","SMain","main","App","useState","isLogin","bool","useLogin","useUsers","useRoom","useRooms","useChat","useSelectUser","toggleRoom","sendPrivateMessage","combinedRooms","combinedUsers","onJoinRoom","targetRoom","joinSelf","onLeaveRoom","onRoomMessage","onStorePrivateMessage","onCountingPrivateMessage","targetUser","Date","disconnect","useAppSocket","sendMessage","args","toggle","InterfaceLayout","ReactDOM","render","getElementById"],"mappings":"2NAQaA,EAAiBC,aAHlB,yDAG0B,CAAEC,aAAa,IAErDF,EAAOG,OAAM,SAACC,O,2BC0BRC,EAASC,IAAOC,QAAV,kjBA+BGC,EA3DD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SACTC,EAAMC,iBAAyB,MAC7BC,ECHH,YAA8C,IAApBH,EAAmB,EAAnBA,SAU/B,MAAO,CACLG,cAVoBC,uBACpB,SAAAC,GACEL,GAAS,GACTT,EAAOe,KAAO,CAAED,YAChBd,EAAOgB,YAET,CAACP,KDJuBQ,CAAe,CAAER,aAAnCG,cACFM,EAAkBL,uBACtB,SAAAM,GAAM,IAAD,EACHA,EAAEC,iBACF,IAAMN,EAAQ,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAKW,eAAR,aAAG,EAAcC,MAC3BR,GAAUF,EAAcE,KAE9B,CAACF,EAAeF,IAGlB,OACE,eAACL,EAAD,WACE,0CACA,uBAAMkB,SAAUL,EAAhB,UACE,uBACER,IAAKA,EACLc,KAAK,OACLC,aAAa,MACbC,YAAY,iBAEd,yDEpBR,I,oBA+BMC,EAAQrB,IAAOsB,QAAV,iYAOQ,qBAAGC,SAA2B,SAAW,UAa7CC,EAnDF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,SACzBC,EAAkBrB,uBAAY,WAClC,GAAIkB,EAAKF,SAAU,OAAOG,EAAUD,EAAKI,QACzCF,EAASF,EAAKI,UACb,CAACH,EAAWC,EAAUF,IAEzB,EAA4BK,mBAAQ,WAClC,OAAKL,EAAKF,SAGH,CAFSE,EAAKM,MAAM,GAAGvB,SACjBiB,EAAKM,MAAMC,OAAS,EAAI,KAAOP,EAAKM,MAAMC,OAAS,GAFrC,CAAC,KAAM,QAIjC,CAACP,EAAKM,MAAON,EAAKF,WALrB,mBAAOU,EAAP,KAAoBC,EAApB,KAOA,OACE,eAACb,EAAD,CAAOc,UAAU,OAAOZ,SAAUE,EAAKF,SAAUa,QAASR,EAA1D,UACE,qBAAKO,UAAU,YAAf,SAA4BV,EAAKY,WAChCZ,EAAKF,UACJ,qCACE,sBAAKY,UAAU,aAAf,UACGF,EADH,IACiBC,GAAI,WAAQA,MAEJ,IAAxBT,EAAKa,gBACJ,qBAAKH,UAAU,sBAAf,SAAsCV,EAAKa,qBAI/Cb,EAAKF,UAAY,+FCmEnBgB,EAAavC,IAAOC,QAAV,sGAQVuC,EAAgBxC,IAAOC,QAAV,sRAeJwC,EApGF,SAACC,GACZ,IACEC,EAOED,EAPFC,MACAC,EAMEF,EANFE,MACAC,EAKEH,EALFG,SACAC,EAIEJ,EAJFI,QACAC,EAGEL,EAHFK,YACAhB,EAEEW,EAFFX,MACAiB,EACEN,EADFM,gBAGIC,ECpBD,YAOI,IANTlB,EAMQ,EANRA,MACAmB,EAKQ,EALRA,SACAC,EAIQ,EAJRA,QACAC,EAGQ,EAHRA,aACAC,EAEQ,EAFRA,gBACAC,EACQ,EADRA,cAEMC,EAAoBhD,uBAAY,YAAkB,IAAfiD,EAAc,EAAdA,QACvC9D,EAAO+D,KAAK,iBAAkBD,KAC7B,IAEGE,EAAanD,uBAAY,WAC7Bb,EAAO+D,KAAK,iBACX,IAEG9B,EAAWpB,uBAAY,SAAAsB,GAC3BnC,EAAO+D,KAAK,YAAa5B,KACxB,IAGH8B,qBAAU,WA6BR,OA5BAjE,EAAOkE,GAAG,kBAAkB,SAAAC,GAC1B,IAAMC,EAAQ,eAAQ/B,GACtB+B,EAASD,EAAKE,QAAUF,EACxBX,EAASY,GACTX,EAAQ,CAAEK,QAAQ,GAAD,OAAKK,EAAKrD,SAAV,iEAGnBd,EAAOkE,GAAG,qBAAqB,YAA2B,IAAxBG,EAAuB,EAAvBA,OAAQvD,EAAe,EAAfA,SAClCwD,GAAqB,OAAZZ,QAAY,IAAZA,OAAA,EAAAA,EAAcW,UAAWA,EACpCP,EAAO,UAAMhD,EAAN,4DACPwD,IACFR,EAAO,gDAAchD,EAAd,4DACP6C,EAAgB,OAElB,IAAMS,EAAmB,GACRG,OAAOC,OAAOnC,GACtBoC,SAAQ,SAAAN,GACXA,EAAKE,SAAWA,IAAQD,EAASD,EAAKE,QAAUF,MAGtDV,EAAQ,CAAEK,YACVN,EAASY,MAGXpE,EAAOkE,GAAG,kBAAkB,SAAAQ,GAC1BjB,EAAQ,eAAKiB,OAGR,WACL1E,EAAO2E,IAAI,kBACX3E,EAAO2E,IAAI,qBACX3E,EAAO2E,IAAI,qBAEZ,CAAClB,EAASD,EAAUG,EAAiBtB,EAAOqB,IAE/C,IAAMkB,EAAgB/D,uBACpB,SAACkB,GACC6B,EAAciB,aAAY,WACpB9C,EAAK+C,UAAY9E,EAAOqE,QAAQpC,EAASF,EAAKI,QAClD,IAAM4C,EAAQ,2BAAQnB,EAAcoB,UAAtB,kBAAiCjD,EAAKI,OAASJ,IAC7D6B,EAAcoB,SAAWD,OAG7B,CAACnB,EAAe3B,IAGZgD,EAAepE,uBACnB,SAAAsB,GACEyB,EAAciB,aAAY,WACxB,IAAME,EAAmB,GACCR,OAAOC,OAAOZ,EAAcoB,UAC7CP,SAAQ,SAAA1C,GACXA,EAAKI,SAAWA,IACpB4C,EAAShD,EAAKI,QAAUJ,MAE1B6B,EAAcoB,SAAWD,OAG7B,CAACnB,IAoBH,OAfAK,qBAAU,WASR,OARAjE,EAAOkE,GAAG,gBAAgB,SAAAnC,GACxB6C,EAAc7C,MAGhB/B,EAAOkE,GAAG,eAAe,SAAA/B,GACvB8C,EAAa9C,MAGR,WACLnC,EAAO2E,IAAI,gBACX3E,EAAO2E,IAAI,kBAEZ,CAACC,EAAeK,IAEZ,CACLpB,oBACAG,aACA/B,YDnFSiD,CAAclC,GAEnBmC,EAAqBtE,uBACzB,SAAAiD,GACET,EAAYE,EAAGM,kBAAmB,CAAEC,cAEtC,CAACT,EAAaE,IAGVvB,EAAYnB,uBAChB,SAAAsB,GACE,IAAM4C,EAAQ,eAAQ7B,GACtB6B,EAAS5C,GAAT,2BAAwBe,EAAMf,IAA9B,IAAuCS,eAAgB,IACvDO,EAAS4B,GACT3B,EAAQjB,KAEV,CAACe,EAAOE,EAASD,IAGbiC,EAAgBhD,mBACpB,kBACEmC,OAAOC,OAAOtB,GAAOmC,MAAK,SAACC,EAAGC,GAC5B,OAAID,EAAEzD,UAAkB,EACjB,OAEX,CAACqB,IAEGsC,EAAgBpD,mBACpB,kBACEmC,OAAOC,OAAOnC,GAAOgD,MAAK,SAACC,EAAGC,GAC5B,OAAID,EAAEG,MAAc,EAChBF,EAAEE,KAAa,EACfH,EAAEI,SAASC,OAASJ,EAAEG,SAASC,QAAgB,EAC5C,OAEX,CAACtD,IAEH,OACE,cAACQ,EAAD,UACG+C,uBACCtC,EACA,CACEL,QACAuC,gBACAL,sBAEF,eAACrC,EAAD,WACE,yBAASL,UAAU,mBAAnB,SACE,wBAAQC,QAASa,EAAGS,WAApB,yCAEF,yBAASvB,UAAU,gBAAnB,SACG2C,EAAcS,KAAI,SAAA9D,GAAI,OACrB,cAAC,EAAD,CAEEA,KAAMA,EACNC,UAAWA,EACXC,SAAUsB,EAAGtB,UAHRF,EAAKI,oBE3BpBU,EAAavC,IAAOC,QAAV,sHAQVuC,EAAgBxC,IAAOC,QAAV,wEAKJuF,EA5DE,SAAC,GAQJ,IAPZ1C,EAOW,EAPXA,QACAE,EAMW,EANXA,gBACAD,EAKW,EALXA,YACA0C,EAIW,EAJXA,aACAC,EAGW,EAHXA,UACAC,EAEW,EAFXA,gBACAC,EACW,EADXA,OAEM/D,EAASC,mBAAQ,kBAAM2D,EAAa5D,SAAQ,CAAC4D,EAAa5D,SAC1DgD,EAAqBtE,uBACzB,SAAAiD,GACET,EAAY4C,EAAiB,CAAEnC,UAAS3B,aAE1C,CAACkB,EAAa4C,EAAiB9D,IAG3BgE,EAAiBtF,uBAAY,WACjCuC,EAAQ,MACR8C,MACC,CAAC9C,EAAS8C,IAEPE,EAAmBvF,uBAAY,WACnCmF,EAAU7D,GACV+D,MACC,CAACF,EAAW7D,EAAQ+D,IAEvB,OACE,cAAC,EAAD,UACGN,uBACCtC,EACA,CACEL,MAAO8C,EAAaL,SACpBF,cAAeO,EAAa1D,MAC5B8C,sBAEF,cAAC,EAAD,UACE,sBAAK1C,UAAU,mBAAf,UACE,wBAAQC,QAAS0D,EAAjB,gCACA,wBAAQ1D,QAASyD,EAAjB,sD,gBCtDCE,EAAb,WAOE,WAAYC,EAAYC,EAAoBC,GAAY,yBANxDC,WAMuD,OALvDzB,cAKuD,OAJvDuB,cAIuD,OAHvDG,IAAa,GAG0C,KAFvDC,KAAe,EAGbC,KAAK5B,SAAWsB,EAChBM,KAAKL,SAAWA,EAChBK,KAAKD,KAAOH,EAVhB,0CAaE,WACEI,KAAKF,IAAIjC,SAAQ,SAAAoC,GACfA,OAEFD,KAAKL,SAASK,KAAK5B,YAjBvB,yBAoBE,SAAY6B,GAAY,IAAD,OACjBD,KAAKH,QACPK,QAAQC,IAAI,+BACZC,aAAaJ,KAAKH,QAEpBG,KAAKF,IAAIO,KAAKJ,GACdD,KAAKH,MAAQS,YAAW,WACtB,EAAKC,SACL,EAAKT,IAAM,KACVE,KAAKD,UA7BZ,KC6BMS,EAAW9G,IAAOsB,QAAV,4SAKV,qBAAGyF,SAEC,yCACA,qDAUOC,EAtCF,SAAC,GAAyD,IAAvDnD,EAAsD,EAAtDA,KAAMoD,EAAgD,EAAhDA,qBAAsB7D,EAA0B,EAA1BA,aACpC8D,EAAiB3G,uBAAY,WACjC0G,EAAqBpD,EAAKE,UACzB,CAACkD,EAAsBpD,IAE1B,OACE,eAACiD,EAAD,CACEC,SAAUlD,EAAKE,UAAL,OAAgBX,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAcW,QACxC3B,QAAS8E,EAFX,UAIE,qBAAK/E,UAAU,YAAf,SAA4B0B,EAAKrD,WAChCqD,EAAKuB,UAA6C,IAAjCvB,EAAKuB,SAAS9C,gBAC9B,qBAAKH,UAAU,0BAAf,SACG0B,EAAKuB,SAAS9C,qBCanBwE,EAAW9G,IAAOsB,QAAV,uHAIH,YAEP,MADY,CAAC,QAAS,QAAS,UADV,EAAXJ,SAIF,mBAAwB,IAAxB,EAAGA,KAAyB,UAAY,YAGrCiG,EAvCC,SAAC,GAMH,IALZ3D,EAKW,EALXA,QACA4D,EAIW,EAJXA,KACAC,EAGW,EAHXA,GACAC,EAEW,EAFXA,SACAL,EACW,EADXA,qBAEA,EAAsBnF,mBAAQ,WAC5B,OAAKuF,GAAOD,EACPC,EACDC,EAAiB,CAAC,sBAAD,OAAQD,EAAG7G,SAAX,gBAAyB,GACzC8G,EACE,CAAC,KAAM,GADQ,CAAC,GAAD,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAM5G,SAAV,yCAA6B,GAFnC,QAAC4G,QAAD,IAACA,OAAD,EAACA,EAAM5G,SAAU,GADR,CAAC,eAAM,KAK/B,CAAC4G,EAAMC,EAAIC,IANd,mBAAOC,EAAP,KAAcrG,EAAd,KAQMgG,EAAiB3G,uBAAY,WACjC,GAAK8G,GAAOD,EAAZ,CACA,IAAMI,EAAKF,EAAWD,EAAGtD,OAASqD,EAAKrD,OACvCkD,EAAqBO,MACpB,CAACP,EAAsBK,EAAUF,EAAMC,IAE1C,OACE,eAAC,EAAD,CAAUnG,KAAMA,EAAMkB,QAAS8E,EAA/B,UACE,4BAAIK,IADN,MACoB/D,MCmClBiE,EAASzH,IAAOC,QAAV,opCA0DGyH,EA/GF,SAAC,GAKA,IAJZ/E,EAIW,EAJXA,MACAI,EAGW,EAHXA,YACAK,EAEW,EAFXA,aACA6D,EACW,EADXA,qBAEM7G,EAAMC,iBAAyB,MAC/BO,EAAkBL,uBACtB,SAAAM,GAAM,IAAD,EACHA,EAAEC,iBACF,IAAMsD,EAAO,OAAGhE,QAAH,IAAGA,GAAH,UAAGA,EAAKW,eAAR,aAAG,EAAcC,MACzBoD,IACLrB,EAAYqB,GACZvD,EAAE8G,OAAO,GAAG3G,MAAQ,MAEtB,CAAC+B,IAGGmE,EAAiB3G,uBAAY,WAAO,IAAD,EACjCiH,EAAE,iBAAGpE,QAAH,IAAGA,OAAH,EAAGA,EAAcW,cAAjB,QAA2B,KACnCkD,EAAqBO,KACpB,CAACP,EAAsB7D,IAO1B,OALAO,qBAAU,WACR,IAAMiE,EAAUC,SAASC,cAAc,UAChC,OAAPF,QAAO,IAAPA,KAASG,SAAS,EAAGH,EAAQI,gBAC5B,CAACrF,IAGF,eAAC8E,EAAD,CAAQtF,UAAU,YAAlB,UACE,qBAAKA,UAAU,QAAf,SACGQ,EAAM4C,KAAI,SAAC0C,EAAMC,GAAP,OACT,cAAC,EAAD,2BAEMD,GAFN,IAGEhB,qBAAsBA,IAHxB,eACeiB,SAMnB,uBAAMjH,SAAUL,EAAhB,UACGwC,GACC,oBAAGjB,UAAU,kBAAkBC,QAAS8E,EAAxC,UACG9D,EAAa5C,SADhB,oBAIA4C,GAAgB,yDAClB,uBAAOhD,IAAKA,EAAKc,KAAK,SACtB,yDCdFiH,EAASnI,IAAOC,QAAV,qLAWNmI,EAAWpI,IAAOC,QAAV,2cAsBCoI,EA3DG,SAACC,GACjB,OACE,qCACE,cAACH,EAAD,CAAQhG,UAAU,QAAlB,SACImG,EAAEpD,cAA0BK,KAAI,SAAC1B,GAAD,OAChC,cAAC,EAAD,CAEEA,KAAMA,EACNoD,qBAAsBqB,EAAErB,qBACxB7D,aAAckF,EAAElF,cAHXS,EAAKE,aAOhB,eAACqE,EAAD,WACGE,EAAEC,SACH,cAAC,EAAD,CACE5F,MAAO2F,EAAE3F,MACTI,YAAauF,EAAEzD,mBACfzB,aAAckF,EAAElF,aAChB6D,qBAAsBqB,EAAErB,8BCoFlC,IAAMuB,EAAQxI,IAAOyI,KAAV,6DAKIC,EAhHf,WACE,MCfK,WACL,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAgB3C,EAAhB,KASA,MAAO,CAAE2C,UAASzI,SAPDI,uBACf,SAAAsI,GACE5C,EAAS4C,KAEX,CAAC5C,KDQ2B6C,GAAtBF,EAAR,EAAQA,QAASzI,EAAjB,EAAiBA,SACjB,EEfK,WACL,MAA0BwI,mBAAiB,IAA3C,mBAAO5G,EAAP,KAAckE,EAAd,KASA,MAAO,CAAElE,QAAOmB,SAPC3C,uBACf,SAACwB,GACCkE,EAASlE,KAEX,CAACkE,KFQyB8C,GAApBhH,EAAR,EAAQA,MAAOmB,EAAf,EAAeA,SACf,EGjBK,WACL,MAAyByF,mBAAwB,MAAjD,mBAAOlH,EAAP,KAAawE,EAAb,KASA,MAAO,CAAExE,OAAMqB,QAPCvC,uBACd,SAACsB,GACCoE,EAASpE,KAEX,CAACoE,KHUuB+C,GAAlBvH,EAAR,EAAQA,KAAMqB,EAAd,EAAcA,QACd,EIjBK,WACL,MAA0B6F,mBAAiB,IAA3C,mBAAO/F,EAAP,KAAcqD,EAAd,KASA,MAAO,CAAErD,QAAOC,SAPCtC,uBACf,SAACqC,GACCqD,EAAS,eAAKrD,MAEhB,CAACqD,KJUyBgD,GAApBrG,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,EKlBK,WACL,MAA0B8F,mBAAkB,IAA5C,mBAAOhG,EAAP,KAAcsD,EAAd,KAEM9C,EAAU5C,uBACd,SAAC0H,GACChC,EAAS,GAAD,mBAAKtD,GAAL,CAAYsF,OAEtB,CAAChC,EAAUtD,IAGb,MAAO,CAAEA,QAAOQ,WLQW+F,GAAnBvG,EAAR,EAAQA,MAAOQ,EAAf,EAAeA,QACf,EMnBK,WACL,MAAiCwF,mBAAuB,MAAxD,mBAAOvF,EAAP,KAAqB6C,EAArB,KASA,MAAO,CAAE7C,eAAcC,gBAPC9C,uBACtB,SAACsD,GACCoC,EAASpC,KAEX,CAACoC,KNYuCkD,GAAlC/F,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAEhBC,EAAgBxB,mBACpB,kBAAM,IAAIiE,EAASnD,EAAOC,EAAU,KACpC,CAACD,EAAOC,IAGJuG,EAAa7I,uBACjB,SAAAsB,GACEiB,EAAQjB,GACRwB,EAAgB,QAElB,CAACA,EAAiBP,IAGdG,EOlBD,YAUI,IATTlB,EASQ,EATRA,MACAmB,EAQQ,EARRA,SACAN,EAOQ,EAPRA,MACAC,EAMQ,EANRA,SACApB,EAKQ,EALRA,KACAqB,EAIQ,EAJRA,QACAK,EAGQ,EAHRA,QACAG,EAEQ,EAFRA,cACAF,EACQ,EADRA,aAGMsC,EAAYnF,uBAChB,SAAAsB,GACEiB,EAAQ,MACR,IAAM2B,EAAmB,GACRR,OAAOC,OAAOtB,GACtBuB,SAAQ,SAAA1C,GACXA,EAAKI,SAAWA,IAAQ4C,EAAShD,EAAKI,QAAUJ,MAEtDoB,EAAS4B,GACT/E,EAAO+D,KAAK,aAAc5B,KAE5B,CAACiB,EAASD,EAAUD,IAGhBgD,EAASrF,uBAAY,WACzBb,EAAO+D,KAAK,aACX,IAEGkC,EAAkBpF,uBAAY,YAA0B,IAAvBiD,EAAsB,EAAtBA,QAAS3B,EAAa,EAAbA,OAC9CnC,EAAO+D,KAAK,eAAgB,CAAED,UAAS3B,aACtC,IAEGwH,EAAqB9I,uBAAY,SAAAiD,GACrC9D,EAAO+D,KAAK,kBAAmBD,KAC9B,IAGHG,qBAAU,WAqCR,OApCAjE,EAAOkE,GAAG,SAAS,SAAC7B,GAClB,IAAM+B,EAAmB,GACzB/B,EAAMoC,SAAQ,SAAAN,GACZA,EAAKsB,MAAO,EACRtB,EAAKE,SAAWrE,EAAOqE,SAAQF,EAAKsB,MAAO,GAC/CrB,EAASD,EAAKE,QAAUF,KAE1BX,EAASY,MAGXpE,EAAOkE,GAAG,SAAS,SAAChB,GAClB,IAAM6B,EAAmB,GACzB7B,EAAMuB,SAAQ,SAAA1C,GAAI,OAAKgD,EAAShD,EAAKI,QAAUJ,KAC/CoB,EAAS4B,MAGX/E,EAAOkE,GAAG,WAAW,YAA6B,IAA1BE,EAAyB,EAAzBA,SAAUW,EAAe,EAAfA,SAC1B6E,EAAwB,GAC9B7E,EAASN,SAAQ,SAAC1C,GACZmB,EAAMnB,EAAKI,UAASyH,EAAc7H,EAAKI,QAAUe,EAAMnB,EAAKI,SAE3De,EAAMnB,EAAKI,UAASyH,EAAc7H,EAAKI,QAAUJ,MAKxD,IAAM8H,EAAwB,GAC9BzF,EAASK,SAAQ,SAACN,GACZ9B,EAAM8B,EAAKE,UAASwF,EAAc1F,EAAKE,QAAUhC,EAAM8B,EAAKE,SAC3DhC,EAAM8B,EAAKE,UAASwF,EAAc1F,EAAKE,QAAUF,MAGxDhB,EAASyG,GACTpG,EAASqG,MAGJ,WACL7J,EAAO2E,IAAI,SACX3E,EAAO2E,IAAI,SACX3E,EAAO2E,IAAI,cAEZ,CAACxB,EAAUK,EAAUN,EAAOb,IAE/B,IAAMyH,EAAajJ,uBACjB,YAA0C,IAAvCwB,EAAsC,EAAtCA,MAAOgC,EAA+B,EAA/BA,OAAQvD,EAAuB,EAAvBA,SAAUqB,EAAa,EAAbA,OAC1ByB,EAAciB,aAAY,WACxB,IAAMkF,EAAU,eAAQnG,EAAcoB,SAAS7C,IACzC6H,EAAWhK,EAAOqE,SAAWA,EACnC0F,EAAWlI,UAAW,EACtB,IAAMuC,EAAW/B,EAAMwD,KAAI,SAAC1B,GAG1B,OAFAA,EAAKsB,MAAO,EACRtB,EAAKE,SAAWrE,EAAOqE,SAAQF,EAAKsB,MAAO,GACxCtB,KAET4F,EAAW1H,MAAQ+B,EACnB2F,EAAWrE,SAASuB,KAAK,CACvBnD,QAAQ,GAAD,OAAKhD,EAAL,8DAET,IAAMiE,EAAQ,2BAAQnB,EAAcoB,UAAtB,kBAAiC7C,EAAS4H,IACxDnG,EAAcoB,SAAWD,EACrBiF,GAAU5G,EAAQjB,QAG1B,CAACiB,EAASQ,IAGNqG,EAAcpJ,uBAClB,YAAkC,IAA/BwB,EAA8B,EAA9BA,MAAOvB,EAAuB,EAAvBA,SAAUqB,EAAa,EAAbA,OAClByB,EAAciB,aAAY,WACxB,IAAMkF,EAAU,eAAQnG,EAAcoB,SAAS7C,IAC/C,GAAK4H,EAAL,CACAA,EAAW1H,MAAQA,EACnB0H,EAAWrE,SAASuB,KAAK,CACvBnD,QAAQ,GAAD,OAAKhD,EAAL,8DAET,IAAMiE,EAAQ,2BAAQnB,EAAcoB,UAAtB,kBAAiC7C,EAAS4H,IACxDnG,EAAcoB,SAAWD,QAG7B,CAACnB,IAGGsG,EAAgBrJ,uBACpB,YAA0B,IAAvB6D,EAAsB,EAAtBA,QAASvC,EAAa,EAAbA,OACVyB,EAAciB,aAAY,WACxB,IAAMkF,EAAU,eAAQnG,EAAcoB,SAAS7C,IAC/C4H,EAAWrE,SAASuB,KAAKvC,GACpB3C,GAAMgI,EAAWnH,iBACtB,IAAMmC,EAAQ,2BAAQnB,EAAcoB,UAAtB,kBAAiC7C,EAAS4H,IACxDnG,EAAcoB,SAAWD,OAG7B,CAACnB,EAAe7B,IAIlBkC,qBAAU,WAaR,OAZAjE,EAAOkE,GAAG,aAAa,YAA0C,IAAvC7B,EAAsC,EAAtCA,MAAOgC,EAA+B,EAA/BA,OAAQvD,EAAuB,EAAvBA,SAAUqB,EAAa,EAAbA,OACjD2H,EAAW,CAAEzH,QAAOgC,SAAQvD,WAAUqB,cAGxCnC,EAAOkE,GAAG,cAAc,YAAkC,IAA/B7B,EAA8B,EAA9BA,MAAOvB,EAAuB,EAAvBA,SAAUqB,EAAa,EAAbA,OAC1C8H,EAAY,CAAE5H,QAAOvB,WAAUqB,cAGjCnC,EAAOkE,GAAG,gBAAgB,YAA0B,IAAvBQ,EAAsB,EAAtBA,QAASvC,EAAa,EAAbA,OACpC+H,EAAc,CAAExF,UAASvC,cAGpB,WACLnC,EAAO2E,IAAI,aACX3E,EAAO2E,IAAI,cACX3E,EAAO2E,IAAI,mBAEZ,CAACmF,EAAYG,EAAaC,IAE7B,IAAMC,EAAwBtJ,uBAC5B,SAAC+G,EAAUlD,GACTd,EAAciB,aAAY,WAExB,GADApB,EAAQ,2BAAKiB,GAAN,IAAekD,cAClB7F,EAAM,CACR,IAAMgD,EAAQ,eAAQnB,EAAcoB,UACpCD,EAAShD,GAAM2D,SAASuB,KAAxB,2BAAkCvC,GAAlC,IAA2CkD,cAC3ChE,EAAc2C,SAASxB,SAI7B,CAACnB,EAAeH,EAAS1B,IAGrBqI,EAA2BvJ,uBAC/B,SAAA6D,GACEd,EAAciB,aAAY,WACxB,IAAMT,EAAQ,eAAQ/B,GAChBgI,EAAajG,EAASM,EAAQgD,KAAKrD,SACzB,OAAZX,QAAY,IAAZA,OAAA,EAAAA,EAAcW,UAAWgG,EAAWhG,SACtCgG,EAAW3E,SAAS9C,iBACpByH,EAAW3E,SAASC,OAAS,IAAI2E,MAEnC9G,EAASY,QAGb,CAACR,EAAevB,EAAOmB,EAAUE,IA4BnC,OAxBAO,qBAAU,WAQR,OAPAjE,EAAOkE,GAAG,mBAAmB,SAAAQ,GAC3B,IAAMkD,EAAWlD,EAAQgD,KAAKrD,SAAWrE,EAAOqE,OAChD8F,EAAsBvC,EAAUlD,GAC5BkD,GACJwC,EAAyB1F,MAGpB,WACL1E,EAAO2E,IAAI,sBAEZ,CAACwF,EAAuBC,IAG3BnG,qBAAU,WAKR,OAJAjE,EAAOkE,GAAG,WAAW,SAAAG,GACnBrE,EAAOqE,OAASA,KAGX,WACLrE,EAAOuK,gBAER,IAEI,CACLtE,kBACA0D,qBACA3D,YACAE,UPpMSsE,CAAa,CACtBnI,QACAmB,WACAN,QACAC,WACApB,OACAqB,QAASsG,EACTjG,UACAG,gBACAF,iBAGIqC,EAAe3D,mBAAQ,WAC3B,GAAKL,EACL,OAAOmB,EAAMnB,KACZ,CAACmB,EAAOnB,IAELsB,EAAcxC,uBAClB,SAAC4J,EAAaC,GACRhH,GACFH,EAAGoG,mBAAmB,CAAE7F,QAAS4G,EAAK5G,QAAS6D,GAAIjE,IAChDA,GAAc+G,EAAYC,KAEjC,CAAChH,EAAcH,IAGXgE,EAAuB1G,uBAC3B,SAAAwD,GAAW,IAAD,EACFF,EAAI,UAAG9B,EAAMgC,UAAT,QAAoB,KAC9B,IAAKF,EAAM,OAAOR,EAAgB,MAClC,IAAIQ,EAAKsB,KAAT,CACA,IAAMkF,GAAqB,OAAZjH,QAAY,IAAZA,OAAA,EAAAA,EAAcW,UAAWF,EAAKE,OAAS,KAAvC,eAAmDF,GAC5DC,EAAQ,eAAQ/B,GACtB+B,EAASD,EAAKE,QAAQqB,SAAS9C,eAAiB,EAChDe,EAAgBgH,GAChBnH,EAASY,MAEX,CAACT,EAAiBD,EAAcrB,EAAOmB,IAGnCoH,EACJ,cAAC,EAAD,CACElH,aAAcA,EACd6D,qBAAsBA,EACtBlF,MAAOA,EACPmB,SAAUA,EACVG,gBAAiBA,IAIrB,OACE,qBAAKlB,UAAU,MAAf,SACE,eAACqG,EAAD,YACII,GAAW,cAAC,EAAD,CAAOzI,SAAUA,IAC7ByI,GAAWnD,GACV,cAAC,EAAD,CACE3C,QAASsG,EACTpG,gBAAiBsH,EACjBvH,YAAaA,EACb0C,aAAcA,EACdC,UAAWzC,EAAGyC,UACdC,gBAAiB1C,EAAG0C,gBACpBC,OAAQ3C,EAAG2C,SAGdgD,IAAYnD,GAAgB1D,GAC3B,cAAC,EAAD,CACEiB,gBAAiBsH,EACjBxH,QAASsG,EACThG,aAAcA,EACdL,YAAaA,EACbhB,MAAOA,EACPmB,SAAUA,EACVG,gBAAiBA,EACjBV,MAAOA,EACPQ,QAASA,EACTN,SAAUA,EACVD,MAAOA,EACPU,cAAeA,UQ/G3BiH,IAASC,OAEP,cAAC,EAAD,IAEA3C,SAAS4C,eAAe,W","file":"static/js/main.83a44802.chunk.js","sourcesContent":["import { io, Socket } from \"socket.io-client\";\r\ninterface ISocet extends Socket {\r\n  userID?: string;\r\n}\r\n\r\nconst url = \"https://web-chat-sangmin-server.herokuapp.com/web-chat\";\r\n// const url = \"http://localhost:3001/web-chat\";\r\n\r\nexport const socket: ISocet = io(url, { autoConnect: false });\r\n\r\nsocket.onAny((event, ...args) => {\r\n  // console.log(event, args);\r\n});\r\n","import { useCallback, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLoginSocket } from \"hooks/use-login-socket\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nconst Login = ({ setLogin }: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const { connectSocekt } = useLoginSocket({ setLogin });\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const userName = ref?.current?.value;\r\n      if (userName) connectSocekt(userName);\r\n    },\r\n    [connectSocekt, ref]\r\n  );\r\n\r\n  return (\r\n    <SLogin>\r\n      <h2>Web Chat</h2>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input\r\n          ref={ref}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"user name...\"\r\n        />\r\n        <button>입장</button>\r\n      </form>\r\n    </SLogin>\r\n  );\r\n};\r\n\r\nconst SLogin = styled.section`\r\n  width: 300px;\r\n  position: relative;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  form {\r\n    border-bottom: 1px solid #222;\r\n    input {\r\n      display: inline-block;\r\n      width: 80%;\r\n      border: 0;\r\n      outline: none;\r\n      padding: 0.1rem 0.3rem;\r\n    }\r\n    button {\r\n      display: inline-block;\r\n      width: 20%;\r\n      padding: 0.1rem 0.3rem;\r\n      border: 0;\r\n      background: #222;\r\n      border-radius: 3px 3px 0 0;\r\n      color: #eee;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import { useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nexport function useLoginSocket({ setLogin }: Props) {\r\n  const connectSocekt = useCallback(\r\n    userName => {\r\n      setLogin(true);\r\n      socket.auth = { userName };\r\n      socket.connect();\r\n    },\r\n    [setLogin]\r\n  );\r\n\r\n  return {\r\n    connectSocekt,\r\n  };\r\n}\r\n","import React, { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IRoom } from \"types/room\";\r\n\r\ninterface Props {\r\n  room: IRoom;\r\n  enterRoom(T: string): void;\r\n  joinRoom(T: string): void;\r\n}\r\n\r\nconst Room = ({ room, enterRoom, joinRoom }: Props) => {\r\n  const joinRoomHandler = useCallback(() => {\r\n    if (room.isJoined) return enterRoom(room.roomID);\r\n    joinRoom(room.roomID);\r\n  }, [enterRoom, joinRoom, room]);\r\n\r\n  const [primaryUser, size] = useMemo(() => {\r\n    if (!room.isJoined) return [null, null];\r\n    const primary = room.users[0].userName;\r\n    const size = room.users.length < 2 ? null : room.users.length - 1;\r\n    return [primary, size];\r\n  }, [room.users, room.isJoined]);\r\n\r\n  return (\r\n    <SRoom className=\"room\" isJoined={room.isJoined} onClick={joinRoomHandler}>\r\n      <div className=\"room-name\">{room.roomName}</div>\r\n      {room.isJoined && (\r\n        <>\r\n          <div className=\"room-users\">\r\n            {primaryUser} {size && `+${size}`}\r\n          </div>\r\n          {room.hasNewMessages !== 0 && (\r\n            <div className=\"room-hasNewMessages\">{room.hasNewMessages}</div>\r\n          )}\r\n        </>\r\n      )}\r\n      {!room.isJoined && <div>대화방에 참여하세요!</div>}\r\n    </SRoom>\r\n  );\r\n};\r\n\r\nconst SRoom = styled.article<{ isJoined: boolean }>`\r\n  width : calc(98% / 3);\r\n  @media screen and (max-width: 600px) {\r\n    width: calc(98% / 2);\r\n  }\r\n  height : fit-content;\r\n  border : 1px solid;\r\n  border-color : ${({ isJoined }) => (isJoined ? \"tomato\" : \"#444\")}}\r\n  border-radius : 3px;\r\n  margin-right : 1%;\r\n  padding : .2rem .4rem;\r\n  cursor : pointer;\r\n  * {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n\r\n`;\r\n\r\nexport default Room;\r\n","import { cloneElement, ReactElement, useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUsers, IUser } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms } from \"types/room\";\r\nimport { useLobySocket } from \"hooks/use-loby-socket\";\r\nimport { Debounce } from \"util/debounce\";\r\nimport Room from \"components/room/index\";\r\n\r\ntype emitMessage = (T: IChat) => void;\r\n\r\ninterface Props {\r\n  interfaceLayout: ReactElement;\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  chats: IChat[];\r\n  setChat(T: IChat | IChat[]): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: IUser): void;\r\n  rooms: IRooms;\r\n  setRoom(T: string): void;\r\n  setRooms(T: IRooms): void;\r\n  emitMessage(T: emitMessage, U: IChat): void;\r\n  roomsDebounce: Debounce;\r\n}\r\n\r\nconst Loby = (props: Props) => {\r\n  const {\r\n    chats,\r\n    rooms,\r\n    setRooms,\r\n    setRoom,\r\n    emitMessage,\r\n    users,\r\n    interfaceLayout,\r\n  } = props;\r\n\r\n  const SE = useLobySocket(props);\r\n\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(SE.sendPublicMessage, { content });\r\n    },\r\n    [emitMessage, SE]\r\n  );\r\n\r\n  const enterRoom = useCallback(\r\n    roomID => {\r\n      const newRooms = { ...rooms };\r\n      newRooms[roomID] = { ...rooms[roomID], hasNewMessages: 0 };\r\n      setRooms(newRooms);\r\n      setRoom(roomID);\r\n    },\r\n    [rooms, setRoom, setRooms]\r\n  );\r\n\r\n  const iterableRooms = useMemo(\r\n    () =>\r\n      Object.values(rooms).sort((a, b) => {\r\n        if (a.isJoined) return -1;\r\n        return 0;\r\n      }),\r\n    [rooms]\r\n  );\r\n  const iterableUsers = useMemo(\r\n    () =>\r\n      Object.values(users).sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.messages.recent > b.messages.recent) return -1;\r\n        return 0;\r\n      }),\r\n    [users]\r\n  );\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats,\r\n          iterableUsers,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <section className=\"button-container\">\r\n            <button onClick={SE.createRoom}>방 만들기</button>\r\n          </section>\r\n          <section className=\"created-rooms\">\r\n            {iterableRooms.map(room => (\r\n              <Room\r\n                key={room.roomID}\r\n                room={room}\r\n                enterRoom={enterRoom}\r\n                joinRoom={SE.joinRoom}\r\n              />\r\n            ))}\r\n          </section>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: 40%;\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  height: 60%;\r\n  padding: 0.5rem;\r\n  .created-rooms {\r\n    height: calc(99% - 30.1px);\r\n    padding-top: 0.5rem;\r\n    display: flex;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loby;\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRoom, IRooms } from \"types/room\";\r\nimport { Debounce } from \"util/debounce\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  setChat(T: IChat): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: null | IUser): void;\r\n  setRoom(T: null | string): void;\r\n  roomsDebounce: Debounce;\r\n}\r\n\r\nexport function useLobySocket({\r\n  users,\r\n  setUsers,\r\n  setChat,\r\n  selectedUser,\r\n  setSelectedUser,\r\n  roomsDebounce,\r\n}: Props) {\r\n  const sendPublicMessage = useCallback(({ content }) => {\r\n    socket.emit(\"public message\", content);\r\n  }, []);\r\n\r\n  const createRoom = useCallback(() => {\r\n    socket.emit(\"create room\");\r\n  }, []);\r\n\r\n  const joinRoom = useCallback(roomID => {\r\n    socket.emit(\"join room\", roomID);\r\n  }, []);\r\n\r\n  // 로비 내부 채팅\r\n  useEffect(() => {\r\n    socket.on(\"user connected\", user => {\r\n      const newUsers = { ...users };\r\n      newUsers[user.userID] = user;\r\n      setUsers(newUsers);\r\n      setChat({ content: `${user.userName}님이 입장하셨습니다.` });\r\n    });\r\n\r\n    socket.on(\"user disconnected\", ({ userID, userName }) => {\r\n      const isQuit = selectedUser?.userID === userID ? true : false;\r\n      let content = `${userName}님이 퇴장하셨습니다.`;\r\n      if (isQuit) {\r\n        content = `귓속말 대상인 ${userName}님이 퇴장하셨습니다.`;\r\n        setSelectedUser(null);\r\n      }\r\n      const newUsers: IUsers = {};\r\n      const userVals = Object.values(users);\r\n      userVals.forEach(user => {\r\n        if (user.userID !== userID) newUsers[user.userID] = user;\r\n      });\r\n\r\n      setChat({ content });\r\n      setUsers(newUsers);\r\n    });\r\n\r\n    socket.on(\"public message\", message => {\r\n      setChat({ ...message });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"user connected\");\r\n      socket.off(\"user disconnected\");\r\n      socket.off(\"public message\");\r\n    };\r\n  }, [setChat, setUsers, setSelectedUser, users, selectedUser]);\r\n\r\n  const onRoomCreated = useCallback(\r\n    (room: IRoom) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        if (room.creater === socket.userID) joinRoom(room.roomID);\r\n        const newRooms = { ...roomsDebounce.newState, [room.roomID]: room };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce, joinRoom]\r\n  );\r\n\r\n  const onDeleteRoom = useCallback(\r\n    roomID => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const newRooms: IRooms = {};\r\n        const roomVals: IRoom[] = Object.values(roomsDebounce.newState);\r\n        roomVals.forEach(room => {\r\n          if (room.roomID === roomID) return;\r\n          newRooms[room.roomID] = room;\r\n        });\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce]\r\n  );\r\n\r\n  // 방관련\r\n\r\n  useEffect(() => {\r\n    socket.on(\"room created\", room => {\r\n      onRoomCreated(room);\r\n    });\r\n\r\n    socket.on(\"delete room\", roomID => {\r\n      onDeleteRoom(roomID);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"room created\");\r\n      socket.off(\"delete room\");\r\n    };\r\n  }, [onRoomCreated, onDeleteRoom]);\r\n\r\n  return {\r\n    sendPublicMessage,\r\n    createRoom,\r\n    joinRoom,\r\n  };\r\n}\r\n","import { useCallback, useMemo, cloneElement, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IRoom } from \"types/room\";\r\n\r\ntype emitMessage = (T: string, U: string) => void;\r\n\r\ninterface Props {\r\n  setRoom(T: null): void;\r\n  interfaceLayout: ReactElement;\r\n  emitMessage(T: emitMessage, U: { content: string; roomID: string }): void;\r\n  selectedRoom: IRoom;\r\n  leaveRoom(T: string): void;\r\n  sendRoomMessage(T: string, U: string): void;\r\n  goLoby(): void;\r\n}\r\n\r\nconst RoomLoby = ({\r\n  setRoom,\r\n  interfaceLayout,\r\n  emitMessage,\r\n  selectedRoom,\r\n  leaveRoom,\r\n  sendRoomMessage,\r\n  goLoby,\r\n}: Props) => {\r\n  const roomID = useMemo(() => selectedRoom.roomID, [selectedRoom.roomID]);\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(sendRoomMessage, { content, roomID });\r\n    },\r\n    [emitMessage, sendRoomMessage, roomID]\r\n  );\r\n\r\n  const goLobbyHandler = useCallback(() => {\r\n    setRoom(null);\r\n    goLoby();\r\n  }, [setRoom, goLoby]);\r\n\r\n  const leaveRoomHandler = useCallback(() => {\r\n    leaveRoom(roomID);\r\n    goLoby();\r\n  }, [leaveRoom, roomID, goLoby]);\r\n\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats: selectedRoom.messages,\r\n          iterableUsers: selectedRoom.users,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <div className=\"button-container\">\r\n            <button onClick={leaveRoomHandler}>나가기</button>\r\n            <button onClick={goLobbyHandler}>로비로 이동</button>\r\n          </div>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: calc(100% - 46.1px);\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  padding: 0.5rem;\r\n  height: fit-content;\r\n`;\r\n\r\nexport default RoomLoby;\r\n","// setRooms를 모두 newState로 변경하는방식으로 하고, doWork마지막에 setRooms 해주는걸로 해보기\r\nexport class Debounce {\r\n  timer: any;\r\n  newState: any;\r\n  setState: any;\r\n  arr: any[] = [];\r\n  time: number = 0;\r\n\r\n  constructor(state: any, setState: Function, t: number) {\r\n    this.newState = state;\r\n    this.setState = setState;\r\n    this.time = t;\r\n  }\r\n\r\n  doWork() {\r\n    this.arr.forEach(work => {\r\n      work();\r\n    });\r\n    this.setState(this.newState);\r\n  }\r\n\r\n  debounceAct(work: any) {\r\n    if (this.timer) {\r\n      console.log(\"work has pushed on workList\");\r\n      clearTimeout(this.timer);\r\n    }\r\n    this.arr.push(work);\r\n    this.timer = setTimeout(() => {\r\n      this.doWork();\r\n      this.arr = [];\r\n    }, this.time);\r\n  }\r\n}\r\n","import { useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUser } from \"types/user\";\r\n\r\ninterface Props {\r\n  user: IUser;\r\n  togglePrivateMessage(T: string): void;\r\n  selectedUser: null | IUser;\r\n}\r\n\r\nconst User = ({ user, togglePrivateMessage, selectedUser }: Props) => {\r\n  const onClickHandler = useCallback(() => {\r\n    togglePrivateMessage(user.userID);\r\n  }, [togglePrivateMessage, user]);\r\n\r\n  return (\r\n    <SArticle\r\n      isTarget={user.userID === selectedUser?.userID}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div className=\"user-name\">{user.userName}</div>\r\n      {user.messages && user.messages.hasNewMessages !== 0 && (\r\n        <div className=\"messages-hasNewMessages\">\r\n          {user.messages.hasNewMessages}\r\n        </div>\r\n      )}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ isTarget: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-item: center;\r\n  ${({ isTarget }) =>\r\n    isTarget\r\n      ? \"background-color : #fff; color : black\"\r\n      : \"background-color : transparent; color : #f2f2f2\"};\r\n  padding: 0.2rem 0.4rem;\r\n  .messages-hasNewMessages {\r\n    background-color: purple;\r\n    padding: 0.1rem 0.3rem;\r\n    border-radius: 3px;\r\n    font-size: 0.85rem;\r\n  }\r\n`;\r\n\r\nexport default User;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IChat } from \"types/chat\";\r\n\r\ninterface Props extends IChat {\r\n  togglePrivateMessage(T: string): void;\r\n}\r\n\r\nconst Message = ({\r\n  content,\r\n  from,\r\n  to,\r\n  fromSelf,\r\n  togglePrivateMessage,\r\n}: Props) => {\r\n  const [title, type] = useMemo(() => {\r\n    if (!to && !from) return [\"공지\", 0];\r\n    if (!to) return [from?.userName, 1];\r\n    if (fromSelf) return [`당신이 ${to.userName}에게`, 2];\r\n    if (!fromSelf) return [`${from?.userName}님이 당신에게`, 2];\r\n    return [null, 1];\r\n  }, [from, to, fromSelf]);\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    if (!to || !from) return;\r\n    const id = fromSelf ? to.userID : from.userID;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, fromSelf, from, to]);\r\n\r\n  return (\r\n    <SArticle type={type} onClick={onClickHandler}>\r\n      <b>{title}</b> : {content}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ type: number }>`\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n  color: ${({ type }) => {\r\n    const arr = [\"green\", \"black\", \"purple\"];\r\n    return arr[type];\r\n  }};\r\n  cursor: ${({ type }) => (type === 2 ? \"pointer\" : \"normal\")};\r\n`;\r\n\r\nexport default Message;\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IUser } from \"types/user\";\r\nimport Message from \"components/message/index\";\r\n\r\ninterface Props {\r\n  chats: IChat[];\r\n  emitMessage(T: string): void;\r\n  selectedUser: IUser | null;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nconst Chat = ({\r\n  chats,\r\n  emitMessage,\r\n  selectedUser,\r\n  togglePrivateMessage,\r\n}: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const message = ref?.current?.value;\r\n      if (!message) return;\r\n      emitMessage(message);\r\n      e.target[0].value = \"\";\r\n    },\r\n    [emitMessage]\r\n  );\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    const id = selectedUser?.userID ?? null;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    const element = document.querySelector(\".chats\");\r\n    element?.scrollTo(0, element.scrollHeight);\r\n  }, [chats]);\r\n\r\n  return (\r\n    <SChats className=\"chat-area\">\r\n      <div className=\"chats\">\r\n        {chats.map((chat, i) => (\r\n          <Message\r\n            key={`chat ${i}`}\r\n            {...chat}\r\n            togglePrivateMessage={togglePrivateMessage}\r\n          />\r\n        ))}\r\n      </div>\r\n      <form onSubmit={onSubmitHandler}>\r\n        {selectedUser && (\r\n          <b className=\"private-message\" onClick={onClickHandler}>\r\n            {selectedUser.userName} 에게\r\n          </b>\r\n        )}\r\n        {!selectedUser && <b>모두에게</b>}\r\n        <input ref={ref} type=\"text\" />\r\n        <button>입력</button>\r\n      </form>\r\n    </SChats>\r\n  );\r\n};\r\n\r\nconst SChats = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  .chats {\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 36.1px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    padding: 0.4rem;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n  form {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 36px;\r\n    background: #222;\r\n    display: flex;\r\n    align-items: center;\r\n    b {\r\n      display: inline-block;\r\n      width: 20%;\r\n      background-color: #222;\r\n      border-radius: 6px 0 0 6px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      color: #fff;\r\n      padding-left: 0.3rem;\r\n      &.private-message {\r\n        color: rgba(245, 81, 226, 1);\r\n      }\r\n    }\r\n    input {\r\n      border: 0;\r\n      width: 70%;\r\n      padding: 0.2rem 0.4rem;\r\n      outline: none;\r\n      border-radius: 6px;\r\n    }\r\n    button {\r\n      border: 0;\r\n      background: none;\r\n      width: 10%;\r\n      color: #fff;\r\n      cursor: pointer;\r\n    }\r\n    * {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport User from \"components/user/index\";\r\nimport { IChat } from \"types/chat\";\r\nimport { JsxChild } from \"typescript\";\r\nimport Chat from \"components/chat/index\";\r\n\r\ninterface Props {\r\n  selectedUser: null | IUser;\r\n  togglePrivateMessage(T: string): void;\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  setSelectedUser(T: IUser): void;\r\n  chats?: IChat[];\r\n  iterableUsers?: IUser[];\r\n  emitMessageHandler?(T: string): void;\r\n  children?: JsxChild;\r\n}\r\n\r\nconst Interface = (p: Props) => {\r\n  return (\r\n    <>\r\n      <SUsers className=\"users\">\r\n        {(p.iterableUsers as IUser[]).map((user: IUser) => (\r\n          <User\r\n            key={user.userID}\r\n            user={user}\r\n            togglePrivateMessage={p.togglePrivateMessage}\r\n            selectedUser={p.selectedUser}\r\n          />\r\n        ))}\r\n      </SUsers>\r\n      <SChatAct>\r\n        {p.children}\r\n        <Chat\r\n          chats={p.chats as IChat[]}\r\n          emitMessage={p.emitMessageHandler as (T: string) => void}\r\n          selectedUser={p.selectedUser}\r\n          togglePrivateMessage={p.togglePrivateMessage}\r\n        />\r\n      </SChatAct>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SUsers = styled.section`\r\n  width: 20%;\r\n  height: 100%;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  background: #222;\r\n`;\r\n\r\nconst SChatAct = styled.section`\r\n  width: 80%;\r\n  height : 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  .button-container {\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    height : 30px;\r\n    button {\r\n      display: inline-block;\r\n      width: fit-content;\r\n      background: transparent;\r\n      border 1px solid #666;\r\n      border-radius : 3px;\r\n      padding : .1rem .3rem;\r\n      cursor : pointer;\r\n      margin-left : .3rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Interface;\r\n","import { useCallback, useMemo } from \"react\";\nimport \"styles/global.css\";\nimport styled from \"styled-components\";\nimport { useLogin } from \"hooks/use-login\";\nimport { useAppSocket } from \"hooks/use-app-socket\";\nimport { useUsers } from \"hooks/use-users\";\nimport { useChat } from \"hooks/use-chat\";\nimport { useRoom } from \"hooks/use-room\";\nimport { useRooms } from \"hooks/use-rooms\";\nimport { useSelectUser } from \"hooks/use-select-user\";\nimport Login from \"pages/login/index\";\nimport Loby from \"pages/loby\";\nimport RoomLoby from \"pages/room-loby\";\nimport { Debounce } from \"util/debounce\";\nimport Interface from \"components/interface/index\";\n\nfunction App() {\n  const { isLogin, setLogin } = useLogin();\n  const { users, setUsers } = useUsers();\n  const { room, setRoom } = useRoom();\n  const { rooms, setRooms } = useRooms();\n  const { chats, setChat } = useChat();\n  const { selectedUser, setSelectedUser } = useSelectUser();\n\n  const roomsDebounce = useMemo(\n    () => new Debounce(rooms, setRooms, 0),\n    [rooms, setRooms]\n  );\n\n  const toggleRoom = useCallback(\n    roomID => {\n      setRoom(roomID);\n      setSelectedUser(null);\n    },\n    [setSelectedUser, setRoom]\n  );\n\n  const SE = useAppSocket({\n    users,\n    setUsers,\n    rooms,\n    setRooms,\n    room,\n    setRoom: toggleRoom,\n    setChat,\n    roomsDebounce,\n    selectedUser,\n  });\n\n  const selectedRoom = useMemo(() => {\n    if (!room) return;\n    return rooms[room];\n  }, [rooms, room]);\n\n  const emitMessage = useCallback(\n    (sendMessage, args) => {\n      if (selectedUser)\n        SE.sendPrivateMessage({ content: args.content, to: selectedUser });\n      if (!selectedUser) sendMessage(args);\n    },\n    [selectedUser, SE]\n  );\n\n  const togglePrivateMessage = useCallback(\n    userID => {\n      const user = users[userID] ?? null;\n      if (!user) return setSelectedUser(null);\n      if (user.self) return;\n      const toggle = selectedUser?.userID === user.userID ? null : { ...user };\n      const newUsers = { ...users };\n      newUsers[user.userID].messages.hasNewMessages = 0;\n      setSelectedUser(toggle);\n      setUsers(newUsers);\n    },\n    [setSelectedUser, selectedUser, users, setUsers]\n  );\n\n  const InterfaceLayout = (\n    <Interface\n      selectedUser={selectedUser}\n      togglePrivateMessage={togglePrivateMessage}\n      users={users}\n      setUsers={setUsers}\n      setSelectedUser={setSelectedUser}\n    />\n  );\n\n  return (\n    <div className=\"app\">\n      <SMain>\n        {!isLogin && <Login setLogin={setLogin} />}\n        {isLogin && selectedRoom && (\n          <RoomLoby\n            setRoom={toggleRoom}\n            interfaceLayout={InterfaceLayout}\n            emitMessage={emitMessage}\n            selectedRoom={selectedRoom}\n            leaveRoom={SE.leaveRoom}\n            sendRoomMessage={SE.sendRoomMessage}\n            goLoby={SE.goLoby}\n          />\n        )}\n        {isLogin && !selectedRoom && users && (\n          <Loby\n            interfaceLayout={InterfaceLayout}\n            setRoom={toggleRoom}\n            selectedUser={selectedUser}\n            emitMessage={emitMessage}\n            users={users}\n            setUsers={setUsers}\n            setSelectedUser={setSelectedUser}\n            chats={chats}\n            setChat={setChat}\n            setRooms={setRooms}\n            rooms={rooms}\n            roomsDebounce={roomsDebounce}\n          />\n        )}\n      </SMain>\n    </div>\n  );\n}\n\nconst SMain = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default App;\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useLogin() {\r\n  const [isLogin, setState] = useState(false);\r\n\r\n  const setLogin = useCallback(\r\n    bool => {\r\n      setState(bool);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { isLogin, setLogin };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUsers } from \"types/user\";\r\n\r\nexport function useUsers() {\r\n  const [users, setState] = useState<IUsers>({});\r\n\r\n  const setUsers = useCallback(\r\n    (users: IUsers) => {\r\n      setState(users);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { users, setUsers };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useRoom() {\r\n  const [room, setState] = useState<null | string>(null);\r\n\r\n  const setRoom = useCallback(\r\n    (roomID: null | string) => {\r\n      setState(roomID);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { room, setRoom };\r\n}\r\n","import { useState, useCallback } from \"react\";\r\nimport { IRooms } from \"types/room\";\r\n\r\nexport function useRooms() {\r\n  const [rooms, setState] = useState<IRooms>({});\r\n\r\n  const setRooms = useCallback(\r\n    (rooms: IRooms) => {\r\n      setState({ ...rooms });\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { rooms, setRooms };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IChat } from \"types/chat\";\r\n\r\nexport function useChat() {\r\n  const [chats, setState] = useState<IChat[]>([]);\r\n\r\n  const setChat = useCallback(\r\n    (chat: IChat) => {\r\n      setState([...chats, chat]);\r\n    },\r\n    [setState, chats]\r\n  );\r\n\r\n  return { chats, setChat };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUser } from \"types/user\";\r\n\r\nexport function useSelectUser() {\r\n  const [selectedUser, setState] = useState<null | IUser>(null);\r\n\r\n  const setSelectedUser = useCallback(\r\n    (user: null | IUser) => {\r\n      setState(user);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { selectedUser, setSelectedUser };\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms, IRoom } from \"types/room\";\r\nimport { Debounce } from \"util/debounce\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  rooms: IRooms;\r\n  setRooms(T: IRooms): void;\r\n  room: null | string;\r\n  setRoom(T: null | string): void;\r\n  setChat(T: IChat | IChat[]): void;\r\n  roomsDebounce: Debounce;\r\n  selectedUser: IUser | null;\r\n}\r\n\r\nexport function useAppSocket({\r\n  users,\r\n  setUsers,\r\n  rooms,\r\n  setRooms,\r\n  room,\r\n  setRoom,\r\n  setChat,\r\n  roomsDebounce,\r\n  selectedUser,\r\n}: Props) {\r\n  // 방을 나갈 때, 클라이언트에 저장되어있는 방 정보를 초기화하고 새롭게 받아오도록 처리\r\n  const leaveRoom = useCallback(\r\n    roomID => {\r\n      setRoom(null);\r\n      const newRooms: IRooms = {};\r\n      const roomVals = Object.values(rooms);\r\n      roomVals.forEach(room => {\r\n        if (room.roomID !== roomID) newRooms[room.roomID] = room;\r\n      });\r\n      setRooms(newRooms);\r\n      socket.emit(\"leave room\", roomID);\r\n    },\r\n    [setRoom, setRooms, rooms]\r\n  );\r\n\r\n  const goLoby = useCallback(() => {\r\n    socket.emit(\"go loby\");\r\n  }, []);\r\n\r\n  const sendRoomMessage = useCallback(({ content, roomID }) => {\r\n    socket.emit(\"room message\", { content, roomID });\r\n  }, []);\r\n\r\n  const sendPrivateMessage = useCallback(content => {\r\n    socket.emit(\"private message\", content);\r\n  }, []);\r\n\r\n  // 초기 유저리스트, 방리스트 수령, 로비로 이동시 새롭게 추가or제거된 유저나 방 수령\r\n  useEffect(() => {\r\n    socket.on(\"users\", (users: IUser[]) => {\r\n      const newUsers: IUsers = {};\r\n      users.forEach(user => {\r\n        user.self = false;\r\n        if (user.userID === socket.userID) user.self = true;\r\n        newUsers[user.userID] = user;\r\n      });\r\n      setUsers(newUsers);\r\n    });\r\n\r\n    socket.on(\"rooms\", (rooms: IRoom[]) => {\r\n      const newRooms: IRooms = {};\r\n      rooms.forEach(room => (newRooms[room.roomID] = room));\r\n      setRooms(newRooms);\r\n    });\r\n\r\n    socket.on(\"go loby\", ({ newUsers, newRooms }) => {\r\n      const combinedRooms: IRooms = {};\r\n      newRooms.forEach((room: IRoom) => {\r\n        if (rooms[room.roomID]) combinedRooms[room.roomID] = rooms[room.roomID];\r\n        // 새로운 방 생성\r\n        if (!rooms[room.roomID]) combinedRooms[room.roomID] = room;\r\n\r\n        // 서버에서 받아온 방이 기존 rooms에 없다면 제거\r\n      });\r\n\r\n      const combinedUsers: IUsers = {};\r\n      newUsers.forEach((user: IUser) => {\r\n        if (users[user.userID]) combinedUsers[user.userID] = users[user.userID];\r\n        if (!users[user.userID]) combinedUsers[user.userID] = user;\r\n      });\r\n\r\n      setRooms(combinedRooms);\r\n      setUsers(combinedUsers);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"users\");\r\n      socket.off(\"rooms\");\r\n      socket.off(\"go loby\");\r\n    };\r\n  }, [setRooms, setUsers, rooms, users]);\r\n\r\n  const onJoinRoom = useCallback(\r\n    ({ users, userID, userName, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        const joinSelf = socket.userID === userID;\r\n        targetRoom.isJoined = true;\r\n        const newUsers = users.map((user: IUser) => {\r\n          user.self = false;\r\n          if (user.userID === socket.userID) user.self = true;\r\n          return user;\r\n        });\r\n        targetRoom.users = newUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 입장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n        if (joinSelf) setRoom(roomID);\r\n      });\r\n    },\r\n    [setRoom, roomsDebounce]\r\n  );\r\n\r\n  const onLeaveRoom = useCallback(\r\n    ({ users, userName, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        if (!targetRoom) return;\r\n        targetRoom.users = users;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 퇴장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce]\r\n  );\r\n\r\n  const onRoomMessage = useCallback(\r\n    ({ message, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        targetRoom.messages.push(message);\r\n        if (!room) targetRoom.hasNewMessages++;\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce, room]\r\n  );\r\n\r\n  // 룸 상태에 대한 감지는 지속적으로\r\n  useEffect(() => {\r\n    socket.on(\"join room\", ({ users, userID, userName, roomID }) => {\r\n      onJoinRoom({ users, userID, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"leave room\", ({ users, userName, roomID }) => {\r\n      onLeaveRoom({ users, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"room message\", ({ message, roomID }) => {\r\n      onRoomMessage({ message, roomID });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"join room\");\r\n      socket.off(\"leave room\");\r\n      socket.off(\"room message\");\r\n    };\r\n  }, [onJoinRoom, onLeaveRoom, onRoomMessage]);\r\n\r\n  const onStorePrivateMessage = useCallback(\r\n    (fromSelf, message) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        setChat({ ...message, fromSelf });\r\n        if (room) {\r\n          const newRooms = { ...roomsDebounce.newState };\r\n          newRooms[room].messages.push({ ...message, fromSelf });\r\n          roomsDebounce.setState(newRooms);\r\n        }\r\n      });\r\n    },\r\n    [roomsDebounce, setChat, room]\r\n  );\r\n\r\n  const onCountingPrivateMessage = useCallback(\r\n    message => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const newUsers = { ...users };\r\n        const targetUser = newUsers[message.from.userID];\r\n        if (selectedUser?.userID !== targetUser.userID) {\r\n          targetUser.messages.hasNewMessages++;\r\n          targetUser.messages.recent = new Date();\r\n        }\r\n        setUsers(newUsers);\r\n      });\r\n    },\r\n    [roomsDebounce, users, setUsers, selectedUser]\r\n  );\r\n\r\n  // 귓속말은 상시 감지\r\n  useEffect(() => {\r\n    socket.on(\"private message\", message => {\r\n      const fromSelf = message.from.userID === socket.userID ? true : false;\r\n      onStorePrivateMessage(fromSelf, message);\r\n      if (fromSelf) return;\r\n      onCountingPrivateMessage(message);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"private message\");\r\n    };\r\n  }, [onStorePrivateMessage, onCountingPrivateMessage]);\r\n\r\n  // userID 할당 및 소킷 종료\r\n  useEffect(() => {\r\n    socket.on(\"session\", userID => {\r\n      socket.userID = userID;\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    sendRoomMessage,\r\n    sendPrivateMessage,\r\n    leaveRoom,\r\n    goLoby,\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}