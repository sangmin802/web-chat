{"version":3,"sources":["socket/index.ts","util/debounce.ts","pages/login/index.tsx","hooks/use-login-socket.ts","components/room/index.tsx","pages/loby/index.tsx","hooks/use-loby-socket.ts","pages/room-loby/index.tsx","components/user/index.tsx","components/message/index.tsx","components/chat/index.tsx","components/interface/index.tsx","components/loading-spinner/index.tsx","app.tsx","hooks/use-login.ts","hooks/use-users.ts","hooks/use-room.ts","hooks/use-rooms.ts","hooks/use-chat.ts","hooks/use-select-user.ts","hooks/use-app-socket.ts","index.tsx"],"names":["socket","io","autoConnect","onAny","event","Debounce","state","setState","t","timer","newState","arr","time","this","forEach","work","console","log","clearTimeout","push","setTimeout","doWork","SLogin","styled","section","Login","setLogin","ref","useRef","connectSocekt","useCallback","userName","auth","connect","useLoginSocket","onSubmitHandler","e","preventDefault","current","value","onSubmit","type","autoComplete","placeholder","SRoom","article","isJoined","Room","room","enterRoom","joinRoom","joinRoomHandler","roomID","useMemo","users","length","primaryUser","size","className","onClick","roomName","hasNewMessages","SInterface","SLobyChildren","Loby","props","chats","rooms","setRooms","setRoom","emitMessage","interfaceLayout","SE","setUsers","setChat","selectedUser","setSelectedUser","roomsDebounce","sendPublicMessage","content","emit","createRoom","useEffect","on","user","newUsers","userID","isQuit","Object","values","message","off","onRoomCreated","debounceAct","creater","newRooms","onDeleteRoom","useLobySocket","emitMessageHandler","iterableRooms","sort","a","b","iterableUsers","self","messages","recent","cloneElement","map","RoomLoby","selectedRoom","leaveRoom","sendRoomMessage","goLoby","goLobbyHandler","leaveRoomHandler","SArticle","isTarget","User","togglePrivateMessage","onClickHandler","Message","from","to","fromSelf","title","id","SChats","Chat","target","element","document","querySelector","scrollTo","scrollHeight","chat","i","SUsers","SChatAct","Interface","p","children","LoadingSpinner","SMain","main","App","useState","isLogin","bool","useLogin","useUsers","useRoom","useRooms","useChat","useSelectUser","toggleRoom","sendPrivateMessage","combinedRooms","combinedUsers","onJoinRoom","targetRoom","joinSelf","onLeaveRoom","onRoomMessage","onStorePrivateMessage","onCountingPrivateMessage","targetUser","Date","disconnect","useAppSocket","sendMessage","args","toggle","InterfaceLayout","isUsers","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.64ba191a.chunk.js","sourcesContent":["import { io, Socket } from \"socket.io-client\";\r\ninterface ISocet extends Socket {\r\n  userID?: string;\r\n}\r\n\r\nconst url = \"https://web-chat-sangmin-server.herokuapp.com/web-chat\";\r\n// const url = \"http://localhost:3001/web-chat\";\r\n\r\nexport const socket: ISocet = io(url, { autoConnect: false });\r\n\r\nsocket.onAny((event, ...args) => {\r\n  // console.log(event, args);\r\n});\r\n","// setRooms를 모두 newState로 변경하는방식으로 하고, doWork마지막에 setRooms 해주는걸로 해보기\r\nexport class Debounce {\r\n  timer: any;\r\n  newState: any;\r\n  setState: any;\r\n  arr: any[] = [];\r\n  time: number = 0;\r\n\r\n  constructor(state: any, setState: Function, t: number) {\r\n    this.newState = state;\r\n    this.setState = setState;\r\n    this.time = t;\r\n  }\r\n\r\n  doWork() {\r\n    this.arr.forEach(work => {\r\n      work();\r\n    });\r\n    this.setState(this.newState);\r\n  }\r\n\r\n  debounceAct(work: any) {\r\n    if (this.timer) {\r\n      console.log(\"work has pushed on workList\");\r\n      clearTimeout(this.timer);\r\n    }\r\n    this.arr.push(work);\r\n    this.timer = setTimeout(() => {\r\n      this.doWork();\r\n      this.arr = [];\r\n    }, this.time);\r\n  }\r\n}\r\n","import { useCallback, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useLoginSocket } from \"hooks/use-login-socket\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nconst Login = ({ setLogin }: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const { connectSocekt } = useLoginSocket({ setLogin });\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const userName = ref?.current?.value;\r\n      if (userName) connectSocekt(userName);\r\n    },\r\n    [connectSocekt, ref]\r\n  );\r\n\r\n  return (\r\n    <SLogin>\r\n      <h2>Web Chat</h2>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input\r\n          ref={ref}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"user name...\"\r\n        />\r\n        <button>입장</button>\r\n      </form>\r\n    </SLogin>\r\n  );\r\n};\r\n\r\nconst SLogin = styled.section`\r\n  width: 300px;\r\n  position: relative;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  form {\r\n    border-bottom: 1px solid #222;\r\n    input {\r\n      display: inline-block;\r\n      width: 80%;\r\n      border: 0;\r\n      outline: none;\r\n      padding: 0.1rem 0.3rem;\r\n    }\r\n    button {\r\n      display: inline-block;\r\n      width: 20%;\r\n      padding: 0.1rem 0.3rem;\r\n      border: 0;\r\n      background: #222;\r\n      border-radius: 3px 3px 0 0;\r\n      color: #eee;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import { useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\n\r\ninterface Props {\r\n  setLogin(T: boolean): void;\r\n}\r\n\r\nexport function useLoginSocket({ setLogin }: Props) {\r\n  const connectSocekt = useCallback(\r\n    userName => {\r\n      setLogin(true);\r\n      socket.auth = { userName };\r\n      socket.connect();\r\n    },\r\n    [setLogin]\r\n  );\r\n\r\n  return {\r\n    connectSocekt,\r\n  };\r\n}\r\n","import React, { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IRoom } from \"types/room\";\r\n\r\ninterface Props {\r\n  room: IRoom;\r\n  enterRoom(T: string): void;\r\n  joinRoom(T: string): void;\r\n}\r\n\r\nconst Room = ({ room, enterRoom, joinRoom }: Props) => {\r\n  const joinRoomHandler = useCallback(() => {\r\n    if (room.isJoined) return enterRoom(room.roomID);\r\n    joinRoom(room.roomID);\r\n  }, [enterRoom, joinRoom, room]);\r\n\r\n  const [primaryUser, size] = useMemo(() => {\r\n    if (!room.isJoined) return [null, null];\r\n    const primary = room.users[0].userName;\r\n    const size = room.users.length < 2 ? null : room.users.length - 1;\r\n    return [primary, size];\r\n  }, [room.users, room.isJoined]);\r\n\r\n  return (\r\n    <SRoom className=\"room\" isJoined={room.isJoined} onClick={joinRoomHandler}>\r\n      <div className=\"room-name\">{room.roomName}</div>\r\n      {room.isJoined && (\r\n        <div className=\"room-info\">\r\n          <div className=\"room-users\">\r\n            {primaryUser} {size && `+${size}`}\r\n          </div>\r\n          {room.hasNewMessages !== 0 && (\r\n            <div className=\"room-hasNewMessages\">{room.hasNewMessages}</div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {!room.isJoined && <div>대화방에 참여하세요!</div>}\r\n    </SRoom>\r\n  );\r\n};\r\n\r\nconst SRoom = styled.article<{ isJoined: boolean }>`\r\n  width : calc(98% / 3);\r\n  @media screen and (max-width: 600px) {\r\n    width: calc(98% / 2);\r\n  }\r\n  height : fit-content;\r\n  border : 1px solid;\r\n  border-color : ${({ isJoined }) => (isJoined ? \"tomato\" : \"#444\")}}\r\n  border-radius : 3px;\r\n  margin-right : 1%;\r\n  padding : .2rem .4rem;\r\n  cursor : pointer;\r\n  * {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n  .room-info {\r\n    display : flex;\r\n    justify-content : space-between;\r\n    .room-hasNewMessages {\r\n      background-color: purple;\r\n      padding: 0.1rem 0.3rem;\r\n      border-radius: 3px;\r\n      font-size: 0.85rem;\r\n      color : white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Room;\r\n","import { cloneElement, ReactElement, useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUsers, IUser } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms } from \"types/room\";\r\nimport { useLobySocket } from \"hooks/use-loby-socket\";\r\nimport { Debounce } from \"util/debounce\";\r\nimport Room from \"components/room/index\";\r\n\r\ntype emitMessage = (T: IChat) => void;\r\n\r\ninterface Props {\r\n  interfaceLayout: ReactElement;\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  chats: IChat[];\r\n  setChat(T: IChat | IChat[]): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: IUser): void;\r\n  rooms: IRooms;\r\n  setRoom(T: string): void;\r\n  setRooms(T: IRooms): void;\r\n  emitMessage(T: emitMessage, U: IChat): void;\r\n  roomsDebounce: Debounce;\r\n}\r\n\r\nconst Loby = (props: Props) => {\r\n  const {\r\n    chats,\r\n    rooms,\r\n    setRooms,\r\n    setRoom,\r\n    emitMessage,\r\n    users,\r\n    interfaceLayout,\r\n  } = props;\r\n\r\n  const SE = useLobySocket(props);\r\n\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(SE.sendPublicMessage, { content });\r\n    },\r\n    [emitMessage, SE]\r\n  );\r\n\r\n  const enterRoom = useCallback(\r\n    roomID => {\r\n      const newRooms = { ...rooms };\r\n      newRooms[roomID] = { ...rooms[roomID], hasNewMessages: 0 };\r\n      setRooms(newRooms);\r\n      setRoom(roomID);\r\n    },\r\n    [rooms, setRoom, setRooms]\r\n  );\r\n\r\n  const iterableRooms = useMemo(\r\n    () =>\r\n      Object.values(rooms).sort((a, b) => {\r\n        if (a.isJoined) return -1;\r\n        return 0;\r\n      }),\r\n    [rooms]\r\n  );\r\n  const iterableUsers = useMemo(\r\n    () =>\r\n      Object.values(users).sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.messages.recent > b.messages.recent) return -1;\r\n        return 0;\r\n      }),\r\n    [users]\r\n  );\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats,\r\n          iterableUsers,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <section className=\"button-container\">\r\n            <button onClick={SE.createRoom}>방 만들기</button>\r\n          </section>\r\n          <section className=\"created-rooms\">\r\n            {iterableRooms.map(room => (\r\n              <Room\r\n                key={room.roomID}\r\n                room={room}\r\n                enterRoom={enterRoom}\r\n                joinRoom={SE.joinRoom}\r\n              />\r\n            ))}\r\n          </section>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: 40%;\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  height: 60%;\r\n  padding: 0.5rem;\r\n  .created-rooms {\r\n    height: calc(99% - 30.1px);\r\n    padding-top: 0.5rem;\r\n    display: flex;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Loby;\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRoom, IRooms } from \"types/room\";\r\nimport { Debounce } from \"util/debounce\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  setChat(T: IChat): void;\r\n  selectedUser: null | IUser;\r\n  setSelectedUser(T: null | IUser): void;\r\n  setRoom(T: null | string): void;\r\n  roomsDebounce: Debounce;\r\n}\r\n\r\nexport function useLobySocket({\r\n  users,\r\n  setUsers,\r\n  setChat,\r\n  selectedUser,\r\n  setSelectedUser,\r\n  roomsDebounce,\r\n}: Props) {\r\n  const sendPublicMessage = useCallback(({ content }) => {\r\n    socket.emit(\"public message\", content);\r\n  }, []);\r\n\r\n  const createRoom = useCallback(() => {\r\n    socket.emit(\"create room\");\r\n  }, []);\r\n\r\n  const joinRoom = useCallback(roomID => {\r\n    socket.emit(\"join room\", roomID);\r\n  }, []);\r\n\r\n  // 로비 내부 채팅\r\n  useEffect(() => {\r\n    socket.on(\"user connected\", user => {\r\n      const newUsers = { ...users };\r\n      newUsers[user.userID] = user;\r\n      setUsers(newUsers);\r\n      setChat({ content: `${user.userName}님이 입장하셨습니다.` });\r\n    });\r\n\r\n    socket.on(\"user disconnected\", ({ userID, userName }) => {\r\n      const isQuit = selectedUser?.userID === userID ? true : false;\r\n      let content = `${userName}님이 퇴장하셨습니다.`;\r\n      if (isQuit) {\r\n        content = `귓속말 대상인 ${userName}님이 퇴장하셨습니다.`;\r\n        setSelectedUser(null);\r\n      }\r\n      const newUsers: IUsers = {};\r\n      const userVals = Object.values(users);\r\n      userVals.forEach(user => {\r\n        if (user.userID !== userID) newUsers[user.userID] = user;\r\n      });\r\n\r\n      setChat({ content });\r\n      setUsers(newUsers);\r\n    });\r\n\r\n    socket.on(\"public message\", message => {\r\n      setChat({ ...message });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"user connected\");\r\n      socket.off(\"user disconnected\");\r\n      socket.off(\"public message\");\r\n    };\r\n  }, [setChat, setUsers, setSelectedUser, users, selectedUser]);\r\n\r\n  const onRoomCreated = useCallback(\r\n    (room: IRoom) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        if (room.creater === socket.userID) joinRoom(room.roomID);\r\n        const newRooms = { ...roomsDebounce.newState, [room.roomID]: room };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce, joinRoom]\r\n  );\r\n\r\n  const onDeleteRoom = useCallback(\r\n    roomID => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const newRooms: IRooms = {};\r\n        const roomVals: IRoom[] = Object.values(roomsDebounce.newState);\r\n        roomVals.forEach(room => {\r\n          if (room.roomID === roomID) return;\r\n          newRooms[room.roomID] = room;\r\n        });\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce]\r\n  );\r\n\r\n  // 방관련\r\n\r\n  useEffect(() => {\r\n    socket.on(\"room created\", room => {\r\n      onRoomCreated(room);\r\n    });\r\n\r\n    socket.on(\"delete room\", roomID => {\r\n      onDeleteRoom(roomID);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"room created\");\r\n      socket.off(\"delete room\");\r\n    };\r\n  }, [onRoomCreated, onDeleteRoom]);\r\n\r\n  return {\r\n    sendPublicMessage,\r\n    createRoom,\r\n    joinRoom,\r\n  };\r\n}\r\n","import { useCallback, useMemo, cloneElement, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IRoom } from \"types/room\";\r\n\r\ntype emitMessage = (T: string, U: string) => void;\r\n\r\ninterface Props {\r\n  setRoom(T: null): void;\r\n  interfaceLayout: ReactElement;\r\n  emitMessage(T: emitMessage, U: { content: string; roomID: string }): void;\r\n  selectedRoom: IRoom;\r\n  leaveRoom(T: string): void;\r\n  sendRoomMessage(T: string, U: string): void;\r\n  goLoby(): void;\r\n}\r\n\r\nconst RoomLoby = ({\r\n  setRoom,\r\n  interfaceLayout,\r\n  emitMessage,\r\n  selectedRoom,\r\n  leaveRoom,\r\n  sendRoomMessage,\r\n  goLoby,\r\n}: Props) => {\r\n  const roomID = useMemo(() => selectedRoom.roomID, [selectedRoom.roomID]);\r\n  const emitMessageHandler = useCallback(\r\n    content => {\r\n      emitMessage(sendRoomMessage, { content, roomID });\r\n    },\r\n    [emitMessage, sendRoomMessage, roomID]\r\n  );\r\n\r\n  const goLobbyHandler = useCallback(() => {\r\n    setRoom(null);\r\n    goLoby();\r\n  }, [setRoom, goLoby]);\r\n\r\n  const leaveRoomHandler = useCallback(() => {\r\n    leaveRoom(roomID);\r\n    goLoby();\r\n  }, [leaveRoom, roomID, goLoby]);\r\n\r\n  return (\r\n    <SInterface>\r\n      {cloneElement(\r\n        interfaceLayout,\r\n        {\r\n          chats: selectedRoom.messages,\r\n          iterableUsers: selectedRoom.users,\r\n          emitMessageHandler,\r\n        },\r\n        <SLobyChildren>\r\n          <div className=\"button-container\">\r\n            <button onClick={leaveRoomHandler}>나가기</button>\r\n            <button onClick={goLobbyHandler}>로비로 이동</button>\r\n          </div>\r\n        </SLobyChildren>\r\n      )}\r\n    </SInterface>\r\n  );\r\n};\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: calc(100% - 46.1px);\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  padding: 0.5rem;\r\n  height: fit-content;\r\n`;\r\n\r\nexport default RoomLoby;\r\n","import { useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUser } from \"types/user\";\r\n\r\ninterface Props {\r\n  user: IUser;\r\n  togglePrivateMessage(T: string): void;\r\n  selectedUser: null | IUser;\r\n}\r\n\r\nconst User = ({ user, togglePrivateMessage, selectedUser }: Props) => {\r\n  const onClickHandler = useCallback(() => {\r\n    togglePrivateMessage(user.userID);\r\n  }, [togglePrivateMessage, user]);\r\n\r\n  return (\r\n    <SArticle\r\n      isTarget={user.userID === selectedUser?.userID}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div className=\"user-name\">{user.userName}</div>\r\n      {user.messages && user.messages.hasNewMessages !== 0 && (\r\n        <div className=\"messages-hasNewMessages\">\r\n          {user.messages.hasNewMessages}\r\n        </div>\r\n      )}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ isTarget: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-item: center;\r\n  ${({ isTarget }) =>\r\n    isTarget\r\n      ? \"background-color : #fff; color : black\"\r\n      : \"background-color : transparent; color : #f2f2f2\"};\r\n  padding: 0.2rem 0.4rem;\r\n  .messages-hasNewMessages {\r\n    background-color: purple;\r\n    padding: 0.1rem 0.3rem;\r\n    border-radius: 3px;\r\n    font-size: 0.85rem;\r\n  }\r\n`;\r\n\r\nexport default User;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IChat } from \"types/chat\";\r\n\r\ninterface Props extends IChat {\r\n  togglePrivateMessage(T: string): void;\r\n}\r\n\r\nconst Message = ({\r\n  content,\r\n  from,\r\n  to,\r\n  fromSelf,\r\n  togglePrivateMessage,\r\n}: Props) => {\r\n  const [title, type] = useMemo(() => {\r\n    if (!to && !from) return [\"공지\", 0];\r\n    if (!to) return [from?.userName, 1];\r\n    if (fromSelf) return [`당신이 ${to.userName}에게`, 2];\r\n    if (!fromSelf) return [`${from?.userName}님이 당신에게`, 2];\r\n    return [null, 1];\r\n  }, [from, to, fromSelf]);\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    if (!to || !from) return;\r\n    const id = fromSelf ? to.userID : from.userID;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, fromSelf, from, to]);\r\n\r\n  return (\r\n    <SArticle type={type} onClick={onClickHandler}>\r\n      <b>{title}</b> : {content}\r\n    </SArticle>\r\n  );\r\n};\r\n\r\nconst SArticle = styled.article<{ type: number }>`\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n  color: ${({ type }) => {\r\n    const arr = [\"green\", \"black\", \"purple\"];\r\n    return arr[type];\r\n  }};\r\n  cursor: ${({ type }) => (type === 2 ? \"pointer\" : \"normal\")};\r\n`;\r\n\r\nexport default Message;\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IUser } from \"types/user\";\r\nimport Message from \"components/message/index\";\r\n\r\ninterface Props {\r\n  chats: IChat[];\r\n  emitMessage(T: string): void;\r\n  selectedUser: IUser | null;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nconst Chat = ({\r\n  chats,\r\n  emitMessage,\r\n  selectedUser,\r\n  togglePrivateMessage,\r\n}: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const message = ref?.current?.value;\r\n      if (!message) return;\r\n      emitMessage(message);\r\n      e.target[0].value = \"\";\r\n    },\r\n    [emitMessage]\r\n  );\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    const id = selectedUser?.userID ?? null;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    const element = document.querySelector(\".chats\");\r\n    element?.scrollTo(0, element.scrollHeight);\r\n  }, [chats]);\r\n\r\n  return (\r\n    <SChats className=\"chat-area\">\r\n      <div className=\"chats\">\r\n        {chats.map((chat, i) => (\r\n          <Message\r\n            key={`chat ${i}`}\r\n            {...chat}\r\n            togglePrivateMessage={togglePrivateMessage}\r\n          />\r\n        ))}\r\n      </div>\r\n      <form onSubmit={onSubmitHandler}>\r\n        {selectedUser && (\r\n          <b className=\"private-message\" onClick={onClickHandler}>\r\n            {selectedUser.userName} 에게\r\n          </b>\r\n        )}\r\n        {!selectedUser && <b>모두에게</b>}\r\n        <input ref={ref} type=\"text\" />\r\n        <button>입력</button>\r\n      </form>\r\n    </SChats>\r\n  );\r\n};\r\n\r\nconst SChats = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  .chats {\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 36.1px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    padding: 0.4rem;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n  form {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 36px;\r\n    background: #222;\r\n    display: flex;\r\n    align-items: center;\r\n    b {\r\n      display: inline-block;\r\n      width: 20%;\r\n      background-color: #222;\r\n      border-radius: 6px 0 0 6px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      color: #fff;\r\n      padding-left: 0.3rem;\r\n      &.private-message {\r\n        color: rgba(245, 81, 226, 1);\r\n      }\r\n    }\r\n    input {\r\n      border: 0;\r\n      width: 70%;\r\n      padding: 0.2rem 0.4rem;\r\n      outline: none;\r\n      border-radius: 6px;\r\n    }\r\n    button {\r\n      border: 0;\r\n      background: none;\r\n      width: 10%;\r\n      color: #fff;\r\n      cursor: pointer;\r\n    }\r\n    * {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport User from \"components/user/index\";\r\nimport { IChat } from \"types/chat\";\r\nimport { JsxChild } from \"typescript\";\r\nimport Chat from \"components/chat/index\";\r\n\r\ninterface Props {\r\n  selectedUser: null | IUser;\r\n  togglePrivateMessage(T: string): void;\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  setSelectedUser(T: IUser): void;\r\n  chats?: IChat[];\r\n  iterableUsers?: IUser[];\r\n  emitMessageHandler?(T: string): void;\r\n  children?: JsxChild;\r\n}\r\n\r\nconst Interface = (p: Props) => {\r\n  return (\r\n    <>\r\n      <SUsers className=\"users\">\r\n        {(p.iterableUsers as IUser[]).map((user: IUser) => (\r\n          <User\r\n            key={user.userID}\r\n            user={user}\r\n            togglePrivateMessage={p.togglePrivateMessage}\r\n            selectedUser={p.selectedUser}\r\n          />\r\n        ))}\r\n      </SUsers>\r\n      <SChatAct>\r\n        {p.children}\r\n        <Chat\r\n          chats={p.chats as IChat[]}\r\n          emitMessage={p.emitMessageHandler as (T: string) => void}\r\n          selectedUser={p.selectedUser}\r\n          togglePrivateMessage={p.togglePrivateMessage}\r\n        />\r\n      </SChatAct>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SUsers = styled.section`\r\n  width: 20%;\r\n  height: 100%;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  background: #222;\r\n`;\r\n\r\nconst SChatAct = styled.section`\r\n  width: 80%;\r\n  height : 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  .button-container {\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    height : 30px;\r\n    button {\r\n      display: inline-block;\r\n      width: fit-content;\r\n      background: transparent;\r\n      border 1px solid #666;\r\n      border-radius : 3px;\r\n      padding : .1rem .3rem;\r\n      cursor : pointer;\r\n      margin-left : .3rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Interface;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst LoadingSpinner = () => {\r\n  return (\r\n    <div className=\"lds-spinner-wrap\">\r\n      <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import { useCallback, useMemo } from \"react\";\nimport \"styles/global.css\";\nimport styled from \"styled-components\";\nimport { useLogin } from \"hooks/use-login\";\nimport { useAppSocket } from \"hooks/use-app-socket\";\nimport { useUsers } from \"hooks/use-users\";\nimport { useChat } from \"hooks/use-chat\";\nimport { useRoom } from \"hooks/use-room\";\nimport { useRooms } from \"hooks/use-rooms\";\nimport { useSelectUser } from \"hooks/use-select-user\";\nimport { Debounce } from \"util/debounce\";\nimport Login from \"pages/login/index\";\nimport Loby from \"pages/loby\";\nimport RoomLoby from \"pages/room-loby\";\nimport Interface from \"components/interface/index\";\nimport LoadingSpinner from \"components/loading-spinner\";\n\nfunction App() {\n  const { isLogin, setLogin } = useLogin();\n  const { users, setUsers } = useUsers();\n  const { room, setRoom } = useRoom();\n  const { rooms, setRooms } = useRooms();\n  const { chats, setChat } = useChat();\n  const { selectedUser, setSelectedUser } = useSelectUser();\n\n  const roomsDebounce = useMemo(\n    () => new Debounce(rooms, setRooms, 0),\n    [rooms, setRooms]\n  );\n\n  const toggleRoom = useCallback(\n    roomID => {\n      setRoom(roomID);\n      setSelectedUser(null);\n    },\n    [setSelectedUser, setRoom]\n  );\n\n  const SE = useAppSocket({\n    users,\n    setUsers,\n    rooms,\n    setRooms,\n    room,\n    setRoom: toggleRoom,\n    setChat,\n    roomsDebounce,\n    selectedUser,\n  });\n\n  const selectedRoom = useMemo(() => {\n    if (!room) return;\n    return rooms[room];\n  }, [rooms, room]);\n\n  const emitMessage = useCallback(\n    (sendMessage, args) => {\n      if (selectedUser)\n        SE.sendPrivateMessage({ content: args.content, to: selectedUser });\n      if (!selectedUser) sendMessage(args);\n    },\n    [selectedUser, SE]\n  );\n\n  const togglePrivateMessage = useCallback(\n    userID => {\n      const user = users[userID] ?? null;\n      if (!user) return setSelectedUser(null);\n      if (user.self) return;\n      const toggle = selectedUser?.userID === user.userID ? null : { ...user };\n      const newUsers = { ...users };\n      newUsers[user.userID].messages.hasNewMessages = 0;\n      setSelectedUser(toggle);\n      setUsers(newUsers);\n    },\n    [setSelectedUser, selectedUser, users, setUsers]\n  );\n\n  const InterfaceLayout = (\n    <Interface\n      selectedUser={selectedUser}\n      togglePrivateMessage={togglePrivateMessage}\n      users={users}\n      setUsers={setUsers}\n      setSelectedUser={setSelectedUser}\n    />\n  );\n\n  const isUsers = useMemo(() => Object.values(users).length, [users]);\n\n  return (\n    <div className=\"app\">\n      {isLogin && isUsers === 0 && <LoadingSpinner />}\n      <SMain>\n        {!isLogin && <Login setLogin={setLogin} />}\n        {isLogin && selectedRoom && (\n          <RoomLoby\n            setRoom={toggleRoom}\n            interfaceLayout={InterfaceLayout}\n            emitMessage={emitMessage}\n            selectedRoom={selectedRoom}\n            leaveRoom={SE.leaveRoom}\n            sendRoomMessage={SE.sendRoomMessage}\n            goLoby={SE.goLoby}\n          />\n        )}\n        {isLogin && !selectedRoom && users && (\n          <Loby\n            interfaceLayout={InterfaceLayout}\n            setRoom={toggleRoom}\n            selectedUser={selectedUser}\n            emitMessage={emitMessage}\n            users={users}\n            setUsers={setUsers}\n            setSelectedUser={setSelectedUser}\n            chats={chats}\n            setChat={setChat}\n            setRooms={setRooms}\n            rooms={rooms}\n            roomsDebounce={roomsDebounce}\n          />\n        )}\n      </SMain>\n    </div>\n  );\n}\n\nconst SMain = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport default App;\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useLogin() {\r\n  const [isLogin, setState] = useState(false);\r\n\r\n  const setLogin = useCallback(\r\n    bool => {\r\n      setState(bool);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { isLogin, setLogin };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUsers } from \"types/user\";\r\n\r\nexport function useUsers() {\r\n  const [users, setState] = useState<IUsers>({});\r\n\r\n  const setUsers = useCallback(\r\n    (users: IUsers) => {\r\n      setState(users);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { users, setUsers };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport function useRoom() {\r\n  const [room, setState] = useState<null | string>(null);\r\n\r\n  const setRoom = useCallback(\r\n    (roomID: null | string) => {\r\n      setState(roomID);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { room, setRoom };\r\n}\r\n","import { useState, useCallback } from \"react\";\r\nimport { IRooms } from \"types/room\";\r\n\r\nexport function useRooms() {\r\n  const [rooms, setState] = useState<IRooms>({});\r\n\r\n  const setRooms = useCallback(\r\n    (rooms: IRooms) => {\r\n      setState({ ...rooms });\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { rooms, setRooms };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IChat } from \"types/chat\";\r\n\r\nexport function useChat() {\r\n  const [chats, setState] = useState<IChat[]>([]);\r\n\r\n  const setChat = useCallback(\r\n    (chat: IChat) => {\r\n      setState([...chats, chat]);\r\n    },\r\n    [setState, chats]\r\n  );\r\n\r\n  return { chats, setChat };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { IUser } from \"types/user\";\r\n\r\nexport function useSelectUser() {\r\n  const [selectedUser, setState] = useState<null | IUser>(null);\r\n\r\n  const setSelectedUser = useCallback(\r\n    (user: null | IUser) => {\r\n      setState(user);\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return { selectedUser, setSelectedUser };\r\n}\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport { IUser, IUsers } from \"types/user\";\r\nimport { IChat } from \"types/chat\";\r\nimport { IRooms, IRoom } from \"types/room\";\r\nimport { Debounce } from \"util/debounce\";\r\n\r\ninterface Props {\r\n  users: IUsers;\r\n  setUsers(T: IUsers): void;\r\n  rooms: IRooms;\r\n  setRooms(T: IRooms): void;\r\n  room: null | string;\r\n  setRoom(T: null | string): void;\r\n  setChat(T: IChat | IChat[]): void;\r\n  roomsDebounce: Debounce;\r\n  selectedUser: IUser | null;\r\n}\r\n\r\nexport function useAppSocket({\r\n  users,\r\n  setUsers,\r\n  rooms,\r\n  setRooms,\r\n  room,\r\n  setRoom,\r\n  setChat,\r\n  roomsDebounce,\r\n  selectedUser,\r\n}: Props) {\r\n  // 방을 나갈 때, 클라이언트에 저장되어있는 방 정보를 초기화하고 새롭게 받아오도록 처리\r\n  const leaveRoom = useCallback(\r\n    roomID => {\r\n      setRoom(null);\r\n      const newRooms: IRooms = {};\r\n      const roomVals = Object.values(rooms);\r\n      roomVals.forEach(room => {\r\n        if (room.roomID !== roomID) newRooms[room.roomID] = room;\r\n      });\r\n      setRooms(newRooms);\r\n      socket.emit(\"leave room\", roomID);\r\n    },\r\n    [setRoom, setRooms, rooms]\r\n  );\r\n\r\n  const goLoby = useCallback(() => {\r\n    socket.emit(\"go loby\");\r\n  }, []);\r\n\r\n  const sendRoomMessage = useCallback(({ content, roomID }) => {\r\n    socket.emit(\"room message\", { content, roomID });\r\n  }, []);\r\n\r\n  const sendPrivateMessage = useCallback(content => {\r\n    socket.emit(\"private message\", content);\r\n  }, []);\r\n\r\n  // 초기 유저리스트, 방리스트 수령, 로비로 이동시 새롭게 추가or제거된 유저나 방 수령\r\n  useEffect(() => {\r\n    socket.on(\"users\", (users: IUser[]) => {\r\n      const newUsers: IUsers = {};\r\n      users.forEach(user => {\r\n        user.self = false;\r\n        if (user.userID === socket.userID) user.self = true;\r\n        newUsers[user.userID] = user;\r\n      });\r\n      setUsers(newUsers);\r\n    });\r\n\r\n    socket.on(\"rooms\", (rooms: IRoom[]) => {\r\n      const newRooms: IRooms = {};\r\n      rooms.forEach(room => (newRooms[room.roomID] = room));\r\n      setRooms(newRooms);\r\n    });\r\n\r\n    socket.on(\"go loby\", ({ newUsers, newRooms }) => {\r\n      const combinedRooms: IRooms = {};\r\n      newRooms.forEach((room: IRoom) => {\r\n        if (rooms[room.roomID]) combinedRooms[room.roomID] = rooms[room.roomID];\r\n        // 새로운 방 생성\r\n        if (!rooms[room.roomID]) combinedRooms[room.roomID] = room;\r\n\r\n        // 서버에서 받아온 방이 기존 rooms에 없다면 제거\r\n      });\r\n\r\n      const combinedUsers: IUsers = {};\r\n      newUsers.forEach((user: IUser) => {\r\n        if (users[user.userID]) combinedUsers[user.userID] = users[user.userID];\r\n        if (!users[user.userID]) combinedUsers[user.userID] = user;\r\n      });\r\n\r\n      setRooms(combinedRooms);\r\n      setUsers(combinedUsers);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"users\");\r\n      socket.off(\"rooms\");\r\n      socket.off(\"go loby\");\r\n    };\r\n  }, [setRooms, setUsers, rooms, users]);\r\n\r\n  const onJoinRoom = useCallback(\r\n    ({ users, userID, userName, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        const joinSelf = socket.userID === userID;\r\n        targetRoom.isJoined = true;\r\n        const newUsers = users.map((user: IUser) => {\r\n          user.self = false;\r\n          if (user.userID === socket.userID) user.self = true;\r\n          return user;\r\n        });\r\n        targetRoom.users = newUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 입장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n        if (joinSelf) setRoom(roomID);\r\n      });\r\n    },\r\n    [setRoom, roomsDebounce]\r\n  );\r\n\r\n  const onLeaveRoom = useCallback(\r\n    ({ users, userName, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        if (!targetRoom) return;\r\n        targetRoom.users = users;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 퇴장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce]\r\n  );\r\n\r\n  const onRoomMessage = useCallback(\r\n    ({ message, roomID }) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const targetRoom = { ...roomsDebounce.newState[roomID] };\r\n        targetRoom.messages.push(message);\r\n        if (!room) targetRoom.hasNewMessages++;\r\n        const newRooms = { ...roomsDebounce.newState, [roomID]: targetRoom };\r\n        roomsDebounce.newState = newRooms;\r\n      });\r\n    },\r\n    [roomsDebounce, room]\r\n  );\r\n\r\n  // 룸 상태에 대한 감지는 지속적으로\r\n  useEffect(() => {\r\n    socket.on(\"join room\", ({ users, userID, userName, roomID }) => {\r\n      onJoinRoom({ users, userID, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"leave room\", ({ users, userName, roomID }) => {\r\n      onLeaveRoom({ users, userName, roomID });\r\n    });\r\n\r\n    socket.on(\"room message\", ({ message, roomID }) => {\r\n      onRoomMessage({ message, roomID });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"join room\");\r\n      socket.off(\"leave room\");\r\n      socket.off(\"room message\");\r\n    };\r\n  }, [onJoinRoom, onLeaveRoom, onRoomMessage]);\r\n\r\n  const onStorePrivateMessage = useCallback(\r\n    (fromSelf, message) => {\r\n      roomsDebounce.debounceAct(() => {\r\n        setChat({ ...message, fromSelf });\r\n        if (room) {\r\n          const newRooms = { ...roomsDebounce.newState };\r\n          newRooms[room].messages.push({ ...message, fromSelf });\r\n          roomsDebounce.setState(newRooms);\r\n        }\r\n      });\r\n    },\r\n    [roomsDebounce, setChat, room]\r\n  );\r\n\r\n  const onCountingPrivateMessage = useCallback(\r\n    message => {\r\n      roomsDebounce.debounceAct(() => {\r\n        const newUsers = { ...users };\r\n        const targetUser = newUsers[message.from.userID];\r\n        if (selectedUser?.userID !== targetUser.userID) {\r\n          targetUser.messages.hasNewMessages++;\r\n          targetUser.messages.recent = new Date();\r\n        }\r\n        setUsers(newUsers);\r\n      });\r\n    },\r\n    [roomsDebounce, users, setUsers, selectedUser]\r\n  );\r\n\r\n  // 귓속말은 상시 감지\r\n  useEffect(() => {\r\n    socket.on(\"private message\", message => {\r\n      const fromSelf = message.from.userID === socket.userID ? true : false;\r\n      onStorePrivateMessage(fromSelf, message);\r\n      if (fromSelf) return;\r\n      onCountingPrivateMessage(message);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"private message\");\r\n    };\r\n  }, [onStorePrivateMessage, onCountingPrivateMessage]);\r\n\r\n  // userID 할당 및 소킷 종료\r\n  useEffect(() => {\r\n    socket.on(\"session\", userID => {\r\n      socket.userID = userID;\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    sendRoomMessage,\r\n    sendPrivateMessage,\r\n    leaveRoom,\r\n    goLoby,\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}