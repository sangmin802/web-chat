{"version":3,"sources":["components/message/index.tsx","components/chat/index.tsx","components/user/index.tsx","components/interface/index.tsx","components/room/index.tsx","pages/loby/index.tsx","pages/login/index.tsx","pages/room-loby/index.tsx","socket/index.ts","socket/action.ts","socket/reducer.ts","App.tsx","hooks/use-socket.ts","index.tsx"],"names":["SArticle","styled","article","type","Message","chat","togglePrivateMessage","content","from","to","fromSelf","useMemo","userName","title","onClickHandler","useCallback","id","userID","onClick","SChats","section","Chat","chats","sendMessage","joinedUser","ref","useRef","onSubmitHandler","e","preventDefault","message","current","value","target","useEffect","element","document","querySelector","scrollTo","scrollHeight","className","map","i","onSubmit","isTarget","User","user","messages","hasNewMessages","SUsers","SChatAct","Interface","props","users","toggleJoinedUser","children","SRoom","isJoined","Room","room","enterRoom","joinRoom","joinRoomHandler","roomID","length","primaryUser","size","roomName","Loby","rooms","createRoom","iterableRooms","Object","values","sort","a","iterableUsers","b","self","recent","SInterface","SLobyChildren","React","memo","Login","connectSocket","handleOnSubmit","SLogin","autoComplete","placeholder","RoomLoby","joinedRoom","leaveRoom","goLoby","handleLeaveRoom","socket","io","autoConnect","onAny","event","USER_CONNECTED","USER_DISCONNECTED","TOGGLE_JOINED_USER","LEAVE_ROOM","JOIN_ROOM","CREATE_ROOM","DELETE_ROOM","ENTER_ROOM","SET_USERS_ROOMS","PRIVATE_MESSAGE","PUBLIC_MESSAGE","ROOM_MESSAGE","initialState","joinedRoomID","socketReducer","state","action","Action","newRooms","newUsers","forEach","roomUsers","targetRoom","joinSelf","roomUser","push","newChats","targetUser","Date","newJoineduser","userVals","isQuit","newJoinedUser","newJoinedRoomID","creater","SMain","main","App","useState","isLogin","SI","setLogin","useReducer","setState","handleGoLoby","emit","handleToggleJoinedUser","handleSendRoomMessage","handleSendPrivateMessage","handleSendPublicMessage","handleCreateRoom","handleJoinRoom","handleEnterRoom","handleConnectSocket","auth","connect","on","disconnect","off","useSocket","handleSendMessage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5853ffca.chunk.js","sourcesContent":["import { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface MessageProps<T> {\r\n  chat: T;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nfunction Message<\r\n  T extends Partial<{\r\n    content: string;\r\n    from: { [key: string]: string };\r\n    to: { [key: string]: string };\r\n    fromSelf: string;\r\n  }>\r\n>({ chat, togglePrivateMessage }: MessageProps<T>) {\r\n  const { content, from, to, fromSelf } = chat;\r\n  const [title, type] = useMemo(() => {\r\n    if (!to && !from) return [\"공지\", 0];\r\n    if (!to) return [from?.userName, 1];\r\n    if (fromSelf) return [`당신이 ${to.userName}에게`, 2];\r\n    if (!fromSelf) return [`${from?.userName}님이 당신에게`, 2];\r\n    return [null, 1];\r\n  }, [from, to, fromSelf]);\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    if (!to || !from) return;\r\n    const id = fromSelf ? to.userID : from.userID;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, fromSelf, from, to]);\r\n\r\n  return (\r\n    <SArticle type={type} onClick={onClickHandler}>\r\n      <b>{title}</b> : {content}\r\n    </SArticle>\r\n  );\r\n}\r\n\r\nconst SArticle = styled.article<{ type: number }>`\r\n  width: 100%;\r\n  position: relative;\r\n  text-align: left;\r\n  color: ${({ type }) => {\r\n    const arr = [\"green\", \"black\", \"purple\"];\r\n    return arr[type];\r\n  }};\r\n  cursor: ${({ type }) => (type === 2 ? \"pointer\" : \"normal\")};\r\n`;\r\n\r\nexport default Message;\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"components/message/index\";\r\n\r\ninterface ChatProps<T> {\r\n  chats: T[];\r\n  sendMessage(T: string): void;\r\n  joinedUser: { userID?: string; userName?: string } | null;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nfunction Chat<T>({\r\n  chats,\r\n  sendMessage,\r\n  joinedUser,\r\n  togglePrivateMessage,\r\n}: ChatProps<T>) {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const message = ref?.current?.value;\r\n      if (!message) return;\r\n      sendMessage(message);\r\n      e.target[0].value = \"\";\r\n    },\r\n    [sendMessage]\r\n  );\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    const id = joinedUser?.userID ?? null;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, joinedUser]);\r\n\r\n  useEffect(() => {\r\n    const element = document.querySelector(\".chats\");\r\n    element?.scrollTo(0, element.scrollHeight);\r\n  }, [chats]);\r\n\r\n  return (\r\n    <SChats className=\"chat-area\">\r\n      <div className=\"chats\">\r\n        {chats.map((chat, i) => (\r\n          <Message\r\n            key={`chat ${i}`}\r\n            chat={chat}\r\n            togglePrivateMessage={togglePrivateMessage}\r\n          />\r\n        ))}\r\n      </div>\r\n      <form onSubmit={onSubmitHandler}>\r\n        {joinedUser && (\r\n          <b className=\"private-message\" onClick={onClickHandler}>\r\n            {joinedUser.userName} 에게\r\n          </b>\r\n        )}\r\n        {!joinedUser && <b>모두에게</b>}\r\n        <input ref={ref} type=\"text\" />\r\n        <button>입력</button>\r\n      </form>\r\n    </SChats>\r\n  );\r\n}\r\n\r\nconst SChats = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  .chats {\r\n    position: relative;\r\n    width: 100%;\r\n    height: calc(100% - 36.1px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    padding: 0.4rem;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n  form {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 36px;\r\n    background: #222;\r\n    display: flex;\r\n    align-items: center;\r\n    b {\r\n      display: inline-block;\r\n      width: 20%;\r\n      background-color: #222;\r\n      border-radius: 6px 0 0 6px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n      color: #fff;\r\n      padding-left: 0.3rem;\r\n      &.private-message {\r\n        color: rgba(245, 81, 226, 1);\r\n      }\r\n    }\r\n    input {\r\n      border: 0;\r\n      width: 70%;\r\n      padding: 0.2rem 0.4rem;\r\n      outline: none;\r\n      border-radius: 6px;\r\n    }\r\n    button {\r\n      border: 0;\r\n      background: none;\r\n      width: 10%;\r\n      color: #fff;\r\n      cursor: pointer;\r\n    }\r\n    * {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import { useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IUser {\r\n  userID: string;\r\n  userName: string;\r\n  messages: {\r\n    hasNewMessages: number;\r\n  };\r\n}\r\n\r\ninterface UserProps<T> {\r\n  user: T;\r\n  togglePrivateMessage(T: string): void;\r\n  joinedUser: T | null;\r\n}\r\n\r\nfunction User<T extends Partial<IUser>>({\r\n  user,\r\n  togglePrivateMessage,\r\n  joinedUser,\r\n}: UserProps<T>) {\r\n  const onClickHandler = useCallback(() => {\r\n    if (!user.userID) return;\r\n    togglePrivateMessage(user.userID);\r\n  }, [togglePrivateMessage, user]);\r\n\r\n  return (\r\n    <SArticle\r\n      isTarget={user.userID === joinedUser?.userID}\r\n      onClick={onClickHandler}\r\n    >\r\n      <div className=\"user-name\">{user.userName}</div>\r\n      {user.messages && user.messages.hasNewMessages !== 0 && (\r\n        <div className=\"messages-hasNewMessages\">\r\n          {user.messages.hasNewMessages}\r\n        </div>\r\n      )}\r\n    </SArticle>\r\n  );\r\n}\r\n\r\nconst SArticle = styled.article<{ isTarget: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-item: center;\r\n  ${({ isTarget }) =>\r\n    isTarget\r\n      ? \"background-color : #fff; color : black\"\r\n      : \"background-color : transparent; color : #f2f2f2\"};\r\n  padding: 0.2rem 0.4rem;\r\n  .messages-hasNewMessages {\r\n    background-color: purple;\r\n    padding: 0.1rem 0.3rem;\r\n    border-radius: 3px;\r\n    font-size: 0.85rem;\r\n  }\r\n`;\r\n\r\nexport default User;\r\n","import { ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport User from \"components/user/index\";\r\nimport Chat from \"components/chat/index\";\r\n\r\ninterface InterfaceProps<T> {\r\n  joinedUser: T | null;\r\n  toggleJoinedUser(T: string): void;\r\n  sendMessage(T: string): void;\r\n  chats: any[];\r\n  users: T[];\r\n  children: ReactElement;\r\n}\r\n\r\nfunction Interface<T extends { userID: string }>(props: InterfaceProps<T>) {\r\n  return (\r\n    <>\r\n      <SUsers className=\"users\">\r\n        {props.users?.map(user => (\r\n          <User\r\n            key={user.userID}\r\n            user={user}\r\n            togglePrivateMessage={props.toggleJoinedUser}\r\n            joinedUser={props.joinedUser}\r\n          />\r\n        ))}\r\n      </SUsers>\r\n      <SChatAct>\r\n        {props.children}\r\n        <Chat\r\n          chats={props.chats}\r\n          sendMessage={props.sendMessage}\r\n          joinedUser={props.joinedUser}\r\n          togglePrivateMessage={props.toggleJoinedUser}\r\n        />\r\n      </SChatAct>\r\n    </>\r\n  );\r\n}\r\n\r\nconst SUsers = styled.section`\r\n  width: 20%;\r\n  height: 100%;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  background: #222;\r\n`;\r\n\r\nconst SChatAct = styled.section`\r\n  width: 80%;\r\n  height : 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  .button-container {\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    height : 30px;\r\n    button {\r\n      display: inline-block;\r\n      width: fit-content;\r\n      background: transparent;\r\n      border 1px solid #666;\r\n      border-radius : 3px;\r\n      padding : .1rem .3rem;\r\n      cursor : pointer;\r\n      margin-left : .3rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Interface;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IRoom {\r\n  isJoined: boolean;\r\n  roomID: string;\r\n  users: { userName: string }[];\r\n  roomName: string;\r\n  hasNewMessages: number;\r\n}\r\n\r\ninterface RoomProps<T> {\r\n  room: T;\r\n  enterRoom(T: string): void;\r\n  joinRoom(T: string): void;\r\n}\r\n\r\nfunction Room<T extends IRoom>({ room, enterRoom, joinRoom }: RoomProps<T>) {\r\n  const joinRoomHandler = useCallback(() => {\r\n    if (room.isJoined) return enterRoom(room.roomID);\r\n    joinRoom(room.roomID);\r\n  }, [enterRoom, joinRoom, room]);\r\n\r\n  const [primaryUser, size] = useMemo(() => {\r\n    if (!room.isJoined) return [null, null];\r\n    const primary = room.users[0].userName;\r\n    const size = room.users.length < 2 ? null : room.users.length - 1;\r\n    return [primary, size];\r\n  }, [room.users, room.isJoined]);\r\n\r\n  return (\r\n    <SRoom className=\"room\" isJoined={room.isJoined} onClick={joinRoomHandler}>\r\n      <div className=\"room-name\">{room.roomName}</div>\r\n      {room.isJoined && (\r\n        <div className=\"room-info\">\r\n          <div className=\"room-users\">\r\n            {primaryUser} {size && `+${size}`}\r\n          </div>\r\n          {room.hasNewMessages !== 0 && (\r\n            <div className=\"room-hasNewMessages\">{room.hasNewMessages}</div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {!room.isJoined && <div>대화방에 참여하세요!</div>}\r\n    </SRoom>\r\n  );\r\n}\r\n\r\nconst SRoom = styled.article<{ isJoined: boolean }>`\r\n  width : calc(98% / 3);\r\n  @media screen and (max-width: 600px) {\r\n    width: calc(98% / 2);\r\n  }\r\n  height : fit-content;\r\n  border : 1px solid;\r\n  border-color : ${({ isJoined }) => (isJoined ? \"tomato\" : \"#444\")}}\r\n  border-radius : 3px;\r\n  margin-right : 1%;\r\n  padding : .2rem .4rem;\r\n  cursor : pointer;\r\n  * {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n  .room-info {\r\n    display : flex;\r\n    justify-content : space-between;\r\n    .room-hasNewMessages {\r\n      background-color: purple;\r\n      padding: 0.1rem 0.3rem;\r\n      border-radius: 3px;\r\n      font-size: 0.85rem;\r\n      color : white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Room;\r\n","import React, { useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Interface, Room } from \"components\";\r\nimport { IUsers, IChat, IRooms, IUser } from \"types/socket\";\r\n\r\ninterface LobyProps {\r\n  users: IUsers;\r\n  chats: IChat[];\r\n  rooms: IRooms;\r\n  joinedUser: IUser | null;\r\n  toggleJoinedUser(T: string): void;\r\n  joinRoom(T: string): void;\r\n  enterRoom(T: string): void;\r\n  createRoom(): void;\r\n  sendMessage(T: string): void;\r\n}\r\n\r\nfunction Loby({\r\n  users,\r\n  chats,\r\n  rooms,\r\n  joinedUser,\r\n  toggleJoinedUser,\r\n  joinRoom,\r\n  enterRoom,\r\n  createRoom,\r\n  sendMessage,\r\n}: LobyProps) {\r\n  const iterableRooms = useMemo(\r\n    () =>\r\n      Object.values(rooms).sort(a => {\r\n        if (a.isJoined) return -1;\r\n        return 0;\r\n      }),\r\n    [rooms]\r\n  );\r\n  const iterableUsers = useMemo(\r\n    () =>\r\n      Object.values(users).sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.messages.recent > b.messages.recent) return -1;\r\n        return 0;\r\n      }),\r\n    [users]\r\n  );\r\n\r\n  return (\r\n    <SInterface>\r\n      <Interface\r\n        joinedUser={joinedUser}\r\n        toggleJoinedUser={toggleJoinedUser}\r\n        sendMessage={sendMessage}\r\n        chats={chats}\r\n        users={iterableUsers}\r\n      >\r\n        <SLobyChildren>\r\n          <section className=\"button-container\">\r\n            <button onClick={createRoom}>방 만들기</button>\r\n          </section>\r\n          <section className=\"created-rooms\">\r\n            {iterableRooms.map(room => (\r\n              <Room\r\n                key={room.roomID}\r\n                room={room}\r\n                enterRoom={enterRoom}\r\n                joinRoom={joinRoom}\r\n              />\r\n            ))}\r\n          </section>\r\n        </SLobyChildren>\r\n      </Interface>\r\n    </SInterface>\r\n  );\r\n}\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: 40%;\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  height: 60%;\r\n  padding: 0.5rem;\r\n  .created-rooms {\r\n    height: calc(99% - 30.1px);\r\n    padding-top: 0.5rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    overflow-y: scroll;\r\n    scrollbar-width: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default React.memo(Loby);\r\n","import React, { useCallback, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  connectSocket(T: string): void;\r\n}\r\n\r\nconst Login = ({ connectSocket }: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const handleOnSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const userName = ref?.current?.value;\r\n      if (userName) connectSocket(userName);\r\n    },\r\n    [connectSocket, ref]\r\n  );\r\n\r\n  return (\r\n    <SLogin>\r\n      <h2>Web Chat</h2>\r\n      <form onSubmit={handleOnSubmit}>\r\n        <input\r\n          ref={ref}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"user name...\"\r\n        />\r\n        <button>입장</button>\r\n      </form>\r\n    </SLogin>\r\n  );\r\n};\r\n\r\nconst SLogin = styled.section`\r\n  width: 300px;\r\n  position: relative;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n  form {\r\n    border-bottom: 1px solid #222;\r\n    input {\r\n      display: inline-block;\r\n      width: 80%;\r\n      border: 0;\r\n      outline: none;\r\n      padding: 0.1rem 0.3rem;\r\n    }\r\n    button {\r\n      display: inline-block;\r\n      width: 20%;\r\n      padding: 0.1rem 0.3rem;\r\n      border: 0;\r\n      background: #222;\r\n      border-radius: 3px 3px 0 0;\r\n      color: #eee;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default React.memo(Login);\r\n","import React, { useCallback } from \"react\";\r\nimport { Interface } from \"components\";\r\nimport styled from \"styled-components\";\r\nimport { IUser, IRoom } from \"types/socket\";\r\n\r\ninterface RoomLobyProps {\r\n  joinedRoom: IRoom;\r\n  joinedUser: IUser | null;\r\n  leaveRoom(T: string): void;\r\n  goLoby(): void;\r\n  toggleJoinedUser(T: string): void;\r\n  sendMessage(T: string): void;\r\n}\r\n\r\nfunction RoomLoby({\r\n  joinedRoom,\r\n  joinedUser,\r\n  leaveRoom,\r\n  goLoby,\r\n  toggleJoinedUser,\r\n  sendMessage,\r\n}: RoomLobyProps) {\r\n  const handleLeaveRoom = useCallback(() => {\r\n    leaveRoom(joinedRoom.roomID);\r\n  }, [leaveRoom, joinedRoom]);\r\n\r\n  return (\r\n    <SInterface>\r\n      <Interface\r\n        joinedUser={joinedUser}\r\n        toggleJoinedUser={toggleJoinedUser}\r\n        sendMessage={sendMessage}\r\n        chats={joinedRoom.messages}\r\n        users={joinedRoom.users}\r\n      >\r\n        <SLobyChildren>\r\n          <div className=\"button-container\">\r\n            <button onClick={handleLeaveRoom}>나가기</button>\r\n            <button onClick={goLoby}>로비로 이동</button>\r\n          </div>\r\n        </SLobyChildren>\r\n      </Interface>\r\n    </SInterface>\r\n  );\r\n}\r\n\r\nconst SInterface = styled.section`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: calc(100% - 46.1px);\r\n  }\r\n`;\r\n\r\nconst SLobyChildren = styled.section`\r\n  padding: 0.5rem;\r\n  height: fit-content;\r\n`;\r\n\r\nexport default React.memo(RoomLoby);\r\n","import { io, Socket } from \"socket.io-client\";\r\ninterface ISocet extends Socket {\r\n  userID?: string;\r\n}\r\n\r\nconst url = \"https://web-chat-sangmin-server.herokuapp.com/web-chat\";\r\n// const url = \"http://localhost:3001/web-chat\";\r\n\r\nexport const socket: ISocet = io(url, { autoConnect: false });\r\n\r\nsocket.onAny((event, ...args) => {\r\n  // console.log(event, args);\r\n});\r\n","import * as Types from \"types/socket\";\r\n\r\n// user\r\nexport const USER_CONNECTED = \"USER_CONNECTED\";\r\nexport const USER_DISCONNECTED = \"USER_DISCONNECTED\";\r\nexport const TOGGLE_JOINED_USER = \"TOGGLE_JOINED_USER\";\r\n\r\n// room\r\nexport const LEAVE_ROOM = \"LEAVE_ROOM\";\r\nexport const JOIN_ROOM = \"JOIN_ROOM\";\r\nexport const CREATE_ROOM = \"CREATE_ROOM\";\r\nexport const DELETE_ROOM = \"DELETE_ROOM\";\r\nexport const ENTER_ROOM = \"ENTER_ROOM\";\r\n\r\n// user+room\r\nexport const SET_USERS_ROOMS = \"SET_USERS_ROOMS\";\r\n\r\n// message\r\nexport const PRIVATE_MESSAGE = \"PRIVATE_MESSAGE\";\r\nexport const PUBLIC_MESSAGE = \"PUBLIC_MESSAGE\";\r\nexport const ROOM_MESSAGE = \"ROOM_MESSAGE\";\r\n\r\nexport type ReducerAction =\r\n  | { type: typeof USER_CONNECTED; user: Types.IUser }\r\n  | { type: typeof USER_DISCONNECTED; userID: string; userName: string }\r\n  | { type: typeof TOGGLE_JOINED_USER; userID: string }\r\n  | {\r\n      type: typeof LEAVE_ROOM;\r\n      roomID: string;\r\n      roomUsers: Types.IUser[];\r\n      userID: string;\r\n      userName: string;\r\n      users: Types.IUser[];\r\n      rooms: Types.IRoom[];\r\n    }\r\n  | {\r\n      type: typeof JOIN_ROOM;\r\n      roomID: string;\r\n      userID: string;\r\n      roomUsers: Types.IUser[];\r\n      userName: string;\r\n    }\r\n  | { type: typeof CREATE_ROOM; room: Types.IRoom }\r\n  | { type: typeof DELETE_ROOM; roomID: string }\r\n  | { type: typeof ENTER_ROOM; roomID: string }\r\n  | { type: typeof SET_USERS_ROOMS; rooms: Types.IRoom[]; users: Types.IUser[] }\r\n  | { type: typeof PRIVATE_MESSAGE; message: Required<Types.IChat> }\r\n  | { type: typeof PUBLIC_MESSAGE; message: Types.IChat }\r\n  | { type: typeof ROOM_MESSAGE; message: Types.IChat; roomID: string };\r\n","import * as Types from \"types/socket\";\r\nimport { socket } from \"./index\";\r\nimport * as Action from \"./action\";\r\n\r\nexport const initialState: Types.IReducer = {\r\n  chats: [],\r\n  users: {},\r\n  rooms: {},\r\n  joinedRoomID: null,\r\n  joinedUser: null,\r\n};\r\n\r\nexport function socketReducer(\r\n  state: Types.IReducer,\r\n  action: Action.ReducerAction\r\n) {\r\n  switch (action.type) {\r\n    case Action.SET_USERS_ROOMS: {\r\n      const { rooms, users } = action;\r\n      const newRooms: Types.IRooms = {};\r\n      const newUsers: Types.IUsers = {};\r\n      rooms.forEach((room: Types.IRoom) => {\r\n        if (state.rooms[room.roomID])\r\n          newRooms[room.roomID] = state.rooms[room.roomID];\r\n        if (!state.rooms[room.roomID]) newRooms[room.roomID] = room;\r\n      });\r\n      users.forEach((user: Types.IUser) => {\r\n        if (state.users[user.userID])\r\n          newUsers[user.userID] = state.users[user.userID];\r\n        if (!state.users[user.userID]) newUsers[user.userID] = user;\r\n      });\r\n      return { ...state, users: newUsers, rooms: newRooms, joinedRoomID: null };\r\n    }\r\n    case Action.ENTER_ROOM: {\r\n      const { roomID } = action;\r\n      const newRooms = { ...state.rooms };\r\n      newRooms[roomID] = { ...state.rooms[roomID], hasNewMessages: 0 };\r\n      return { ...state, rooms: newRooms, joinedRoomID: roomID };\r\n    }\r\n    case Action.JOIN_ROOM: {\r\n      const { roomID, userID, roomUsers, userName } = action;\r\n      const targetRoom = { ...state.rooms[roomID] };\r\n      const joinSelf = socket.userID === userID;\r\n      targetRoom.isJoined = true;\r\n      const newUsers = roomUsers.map((roomUser: Types.IUser) => {\r\n        roomUser.self = false;\r\n        if (roomUser.userID === socket.userID) roomUser.self = true;\r\n        return roomUser;\r\n      });\r\n\r\n      targetRoom.users = newUsers;\r\n      targetRoom.messages.push({\r\n        content: `${userName}님이 입장하셨습니다.`,\r\n      });\r\n      const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n      return {\r\n        ...state,\r\n        rooms: newRooms,\r\n        joinedRoomID: joinSelf ? roomID : state.joinedRoomID,\r\n      };\r\n    }\r\n    case Action.LEAVE_ROOM: {\r\n      const { roomID, roomUsers, userID, userName, users, rooms } = action;\r\n      if (socket.userID === userID) {\r\n        const newRooms: Types.IRooms = {};\r\n        const newUsers: Types.IUsers = {};\r\n        rooms.forEach((room: Types.IRoom) => {\r\n          if (state.rooms[room.roomID])\r\n            newRooms[room.roomID] = state.rooms[room.roomID];\r\n          if (!state.rooms[room.roomID]) newRooms[room.roomID] = room;\r\n        });\r\n        users.forEach((user: Types.IUser) => {\r\n          if (state.users[user.userID])\r\n            newUsers[user.userID] = state.users[user.userID];\r\n          if (!state.users[user.userID]) newUsers[user.userID] = user;\r\n        });\r\n        return {\r\n          ...state,\r\n          rooms: newRooms,\r\n          users: newUsers,\r\n          joinedRoomID: null,\r\n        };\r\n      } else {\r\n        const targetRoom = { ...state.rooms[roomID] };\r\n        targetRoom.users = roomUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 퇴장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n        return { ...state, rooms: newRooms };\r\n      }\r\n    }\r\n    case Action.ROOM_MESSAGE: {\r\n      const { message, roomID } = action;\r\n      const targetRoom = { ...state.rooms[roomID] };\r\n      targetRoom.messages.push(message);\r\n      if (!state.joinedRoomID) targetRoom.hasNewMessages++;\r\n      const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n      return { ...state, rooms: newRooms };\r\n    }\r\n    case Action.PRIVATE_MESSAGE: {\r\n      const { message } = action;\r\n      const fromSelf = message.from.userID === socket.userID ? true : false;\r\n      const newRooms = { ...state.rooms };\r\n      const newChats = [...state.chats];\r\n      const newUsers = { ...state.users };\r\n      const targetUser = newUsers[message.from?.userID];\r\n\r\n      newChats.push({ ...message, fromSelf });\r\n\r\n      if (state.joinedRoomID) {\r\n        const targetRoom = { ...newRooms[state.joinedRoomID] };\r\n        targetRoom.messages.push({ ...message, fromSelf });\r\n        newRooms[state.joinedRoomID] = targetRoom;\r\n      }\r\n\r\n      if (!fromSelf && state.joinedUser?.userID !== targetUser.userID) {\r\n        targetUser.messages.hasNewMessages++;\r\n        targetUser.messages.recent = new Date();\r\n      }\r\n      return { ...state, rooms: newRooms, chats: newChats, users: newUsers };\r\n    }\r\n    case Action.PUBLIC_MESSAGE: {\r\n      const { message } = action;\r\n      const newChats = [...state.chats, { ...message }];\r\n      return { ...state, chats: newChats };\r\n    }\r\n    case Action.TOGGLE_JOINED_USER: {\r\n      const { userID } = action;\r\n      const user = state.users[userID];\r\n      const newJoineduser =\r\n        state.joinedUser?.userID === userID ? null : { ...user };\r\n      const newUsers = { ...state.users };\r\n      newUsers[userID].messages.hasNewMessages = 0;\r\n      return { ...state, users: newUsers, joinedUser: newJoineduser };\r\n    }\r\n    case Action.USER_CONNECTED: {\r\n      const { user } = action;\r\n      const newUsers = { ...state.users, [user.userID]: user };\r\n      const newChats = [\r\n        ...state.chats,\r\n        { content: `${user.userName}님이 입장하셨습니다.` },\r\n      ];\r\n      return { ...state, users: newUsers, chats: newChats };\r\n    }\r\n    case Action.USER_DISCONNECTED: {\r\n      const { userID, userName } = action;\r\n      const newChats = [...state.chats];\r\n      const newUsers: Types.IUsers = {};\r\n      const userVals: any = Object.values(state.users);\r\n      const isQuit = state.joinedUser?.userID === userID ? true : false;\r\n      let newJoinedUser = state.joinedUser;\r\n      let content = `${userName}님이 퇴장하셨습니다.`;\r\n      if (isQuit) {\r\n        content = `귓속말 대상인 ${userName}님이 퇴장하셨습니다.`;\r\n        newJoinedUser = null;\r\n      }\r\n      newChats.push({ content });\r\n      userVals.forEach((user: any) => {\r\n        if (user.userID !== userID) newUsers[user.userID] = user;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        chats: newChats,\r\n        users: newUsers,\r\n        joinedUser: newJoinedUser,\r\n      };\r\n    }\r\n    case Action.CREATE_ROOM: {\r\n      const { room } = action;\r\n      const newJoinedRoomID =\r\n        room.creater === socket.userID ? room.roomID : state.joinedRoomID;\r\n      const isJoined = room.creater === socket.userID ? true : false;\r\n      room.isJoined = isJoined;\r\n      const newRooms = { ...state.rooms, [room.roomID]: room };\r\n      return { ...state, rooms: newRooms, joinedRoomID: newJoinedRoomID };\r\n    }\r\n    case Action.DELETE_ROOM: {\r\n      const { roomID } = action;\r\n      const newRooms: Types.IRooms = {};\r\n      const roomVals: Types.IRoom[] = Object.values(state.rooms);\r\n      roomVals.forEach(room => {\r\n        if (room.roomID === roomID) return;\r\n        newRooms[room.roomID] = room;\r\n      });\r\n      return { ...state, rooms: newRooms };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport \"styles/global.css\";\r\nimport styled from \"styled-components\";\r\nimport { Loby, Login, RoomLoby } from \"pages\";\r\nimport { useSocket } from \"hooks/use-socket\";\r\n\r\nfunction App() {\r\n  const [isLogin, setLogin] = useState(false);\r\n  const SI = useSocket(setLogin);\r\n  const { chats, users, rooms, joinedRoomID, joinedUser } = SI.state;\r\n\r\n  const handleSendMessage = useCallback(\r\n    content => {\r\n      if (joinedUser)\r\n        return SI.handleSendPrivateMessage({ content, to: joinedUser });\r\n      if (joinedRoomID)\r\n        return SI.handleSendRoomMessage({ content, roomID: joinedRoomID });\r\n      return SI.handleSendPublicMessage(content);\r\n    },\r\n    [joinedUser, joinedRoomID]\r\n  );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <SMain>\r\n        {!isLogin && <Login connectSocket={SI.handleConnectSocket} />}\r\n        {isLogin && joinedRoomID && (\r\n          <RoomLoby\r\n            joinedRoom={rooms[joinedRoomID]}\r\n            joinedUser={joinedUser}\r\n            leaveRoom={SI.handleLeaveRoom}\r\n            goLoby={SI.handleGoLoby}\r\n            toggleJoinedUser={SI.handleToggleJoinedUser}\r\n            sendMessage={handleSendMessage}\r\n          />\r\n        )}\r\n        {isLogin && !joinedRoomID && (\r\n          <Loby\r\n            users={users}\r\n            chats={chats}\r\n            rooms={rooms}\r\n            joinedUser={joinedUser}\r\n            toggleJoinedUser={SI.handleToggleJoinedUser}\r\n            joinRoom={SI.handleJoinRoom}\r\n            enterRoom={SI.handleEnterRoom}\r\n            createRoom={SI.handleCreateRoom}\r\n            sendMessage={handleSendMessage}\r\n          />\r\n        )}\r\n      </SMain>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SMain = styled.main`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport default App;\r\n","import { useReducer, useCallback, Reducer, useEffect } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport * as Action from \"socket/action\";\r\nimport { socketReducer, initialState } from \"socket/reducer\";\r\nimport { ReducerAction } from \"socket/action\";\r\n\r\nexport function useSocket(\r\n  setLogin: React.Dispatch<React.SetStateAction<boolean>>\r\n) {\r\n  const [state, setState] = useReducer<\r\n    Reducer<typeof initialState, ReducerAction>\r\n  >(socketReducer, initialState);\r\n  const { joinedRoomID } = state;\r\n\r\n  const handleGoLoby = useCallback(() => {\r\n    socket.emit(\"go loby\");\r\n  }, []);\r\n\r\n  const handleToggleJoinedUser = useCallback(userID => {\r\n    if (userID === socket.userID) return;\r\n    setState({ type: Action.TOGGLE_JOINED_USER, userID });\r\n  }, []);\r\n\r\n  const handleSendRoomMessage = useCallback(({ content, roomID }) => {\r\n    socket.emit(\"room message\", { content, roomID });\r\n  }, []);\r\n\r\n  const handleSendPrivateMessage = useCallback(content => {\r\n    socket.emit(\"private message\", content);\r\n  }, []);\r\n\r\n  const handleSendPublicMessage = useCallback(content => {\r\n    socket.emit(\"public message\", content);\r\n  }, []);\r\n\r\n  const handleCreateRoom = useCallback(() => {\r\n    socket.emit(\"create room\");\r\n  }, []);\r\n\r\n  const handleJoinRoom = useCallback(roomID => {\r\n    socket.emit(\"join room\", roomID);\r\n  }, []);\r\n\r\n  const handleEnterRoom = useCallback(roomID => {\r\n    setState({ type: Action.ENTER_ROOM, roomID });\r\n  }, []);\r\n\r\n  const handleLeaveRoom = useCallback(roomID => {\r\n    socket.emit(\"leave room\", roomID);\r\n  }, []);\r\n\r\n  const handleConnectSocket = useCallback(\r\n    userName => {\r\n      setLogin(true);\r\n      socket.auth = { userName };\r\n      socket.connect();\r\n    },\r\n    [setLogin]\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket.on(\"session\", userID => {\r\n      socket.userID = userID;\r\n    });\r\n\r\n    socket.on(\"users rooms\", ({ users, rooms }) => {\r\n      setState({ type: Action.SET_USERS_ROOMS, users, rooms });\r\n    });\r\n\r\n    socket.on(\"join room\", ({ roomUsers, userID, userName, roomID }) => {\r\n      setState({ type: Action.JOIN_ROOM, roomUsers, userID, userName, roomID });\r\n    });\r\n\r\n    socket.on(\r\n      \"leave room\",\r\n      ({ roomUsers, userID, userName, roomID, users, rooms }) => {\r\n        setState({\r\n          type: Action.LEAVE_ROOM,\r\n          roomUsers,\r\n          userID,\r\n          userName,\r\n          roomID,\r\n          users,\r\n          rooms,\r\n        });\r\n      }\r\n    );\r\n\r\n    socket.on(\"room message\", ({ message, roomID }) => {\r\n      setState({ type: Action.ROOM_MESSAGE, message, roomID });\r\n    });\r\n\r\n    socket.on(\"private message\", message => {\r\n      setState({ type: Action.PRIVATE_MESSAGE, message });\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!joinedRoomID) {\r\n      socket.on(\"room created\", room => {\r\n        setState({ type: Action.CREATE_ROOM, room });\r\n      });\r\n\r\n      socket.on(\"delete room\", roomID => {\r\n        setState({ type: Action.DELETE_ROOM, roomID });\r\n      });\r\n\r\n      socket.on(\"public message\", message => {\r\n        setState({ type: Action.PUBLIC_MESSAGE, message });\r\n      });\r\n\r\n      socket.on(\"user connected\", user => {\r\n        setState({ type: Action.USER_CONNECTED, user });\r\n      });\r\n\r\n      socket.on(\"user disconnected\", ({ userID, userName }) => {\r\n        setState({ type: Action.USER_DISCONNECTED, userID, userName });\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      socket.off(\"room created\");\r\n      socket.off(\"delete room\");\r\n      socket.off(\"public message\");\r\n      socket.off(\"user connected\");\r\n      socket.off(\"user disconnected\");\r\n    };\r\n  }, [joinedRoomID]);\r\n\r\n  return {\r\n    state,\r\n    handleGoLoby,\r\n    handleEnterRoom,\r\n    handleToggleJoinedUser,\r\n    handleSendRoomMessage,\r\n    handleSendPrivateMessage,\r\n    handleSendPublicMessage,\r\n    handleCreateRoom,\r\n    handleJoinRoom,\r\n    handleLeaveRoom,\r\n    handleConnectSocket,\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}