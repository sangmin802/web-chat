{"version":3,"sources":["components/chat/index.style.tsx","components/chat/index.tsx","components/interface/index.style.tsx","components/interface/index.tsx","components/message/index.style.tsx","components/message/index.tsx","components/room/index.style.tsx","components/room/index.tsx","components/user/index.style.tsx","components/user/index.tsx","components/button/index.style.tsx","components/button/index.tsx","components/input/index.style.tsx","components/input/index.tsx","components/text/index.style.tsx","components/text/index.tsx","pages/loby/index.style.tsx","pages/loby/index.tsx","pages/login/index.style.tsx","pages/login/index.tsx","pages/roomLoby/index.style.tsx","pages/roomLoby/index.tsx","socket/index.ts","socket/action.ts","socket/reducer.ts","app.style.tsx","App.tsx","hooks/useSocket.ts","styles/globalStyle.ts","index.tsx"],"names":["ChatArea","styled","section","Chats","Dummy","div","Form","form","Text","Input","Button","Chat","chats","sendMessage","joinedUser","togglePrivateMessage","ref","useRef","onSubmitHandler","useCallback","e","preventDefault","message","current","value","target","onClickHandler","id","userID","useEffect","element","document","querySelector","scrollTo","scrollHeight","className","map","chat","i","onSubmit","type","onClick","userName","Users","ChatTools","Interface","props","users","user","toggleJoinedUser","children","Message","article","content","from","to","fromSelf","useMemo","title","handleToggleMessageType","Room","isJoined","RoomInfo","HasNewMessagesages","room","enterRoom","joinRoom","joinRoomHandler","roomID","length","primaryUser","size","roomName","hasNewMessages","User","isPrivate","HasNewMessages","messages","button","theme","border","input","forwardRef","font","Loby","Buttons","Rooms","rooms","createRoom","iterableRooms","Object","values","sort","a","iterableUsers","b","self","recent","React","memo","Login","Title","h2","connectSocket","handleOnSubmit","autoComplete","placeholder","RoomLoby","joinedRoom","leaveRoom","goLoby","handleLeaveRoom","socket","io","autoConnect","onAny","event","USER_CONNECTED","USER_DISCONNECTED","TOGGLE_JOINED_USER","LEAVE_ROOM","JOIN_ROOM","CREATE_ROOM","DELETE_ROOM","ENTER_ROOM","SET_USERS_ROOMS","PRIVATE_MESSAGE","PUBLIC_MESSAGE","ROOM_MESSAGE","initialState","joinedRoomID","socketReducer","state","action","Action","newRooms","newUsers","forEach","roomUsers","targetRoom","joinSelf","roomUser","push","newMessages","newChats","targetUser","Date","newJoineduser","userVals","isQuit","newJoinedUser","newJoinedRoomID","creater","App","Main","main","useState","isLogin","SI","setLogin","useReducer","setState","handleGoLoby","emit","handleToggleJoinedUser","handleSendRoomMessage","handleSendPrivateMessage","handleSendPublicMessage","handleCreateRoom","handleJoinRoom","handleEnterRoom","handleConnectSocket","auth","connect","on","disconnect","off","useSocket","handleSendMessage","THEME","white","css","borderless","createGlobalStyle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8803cd5c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ChatArea = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Chats = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  width: 100%;\r\n  padding: 0.4rem;\r\n  height: calc(100% - 36.1px);\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const Dummy = styled.div`\r\n  margin-top: auto;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 36px;\r\n  background: #222;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 20%;\r\n  background-color: #222;\r\n  border-radius: 6px 0 0 6px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  padding-left: 0.3rem;\r\n`;\r\n\r\nexport const Input = styled.div`\r\n  width: 70%;\r\n`;\r\nexport const Button = styled.div`\r\n  width: 10%;\r\n`;\r\n","import { useCallback, useEffect, useRef } from \"react\";\r\nimport { Message, Button, Input, Text } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface ChatProps<T> {\r\n  chats: T[];\r\n  sendMessage(T: string): void;\r\n  joinedUser: { userID?: string; userName?: string } | null;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nfunction Chat<T>({\r\n  chats,\r\n  sendMessage,\r\n  joinedUser,\r\n  togglePrivateMessage,\r\n}: ChatProps<T>) {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const onSubmitHandler = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const message = ref?.current?.value;\r\n      if (!message) return;\r\n      sendMessage(message);\r\n      e.target[0].value = \"\";\r\n    },\r\n    [sendMessage]\r\n  );\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    const id = joinedUser?.userID ?? null;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, joinedUser]);\r\n\r\n  useEffect(() => {\r\n    const element = document.querySelector(\".chats\");\r\n    element?.scrollTo(0, element.scrollHeight);\r\n  }, [chats]);\r\n\r\n  return (\r\n    <Styled.ChatArea className=\"chat-area\">\r\n      <Styled.Chats className=\"chats\">\r\n        <Styled.Dummy />\r\n        {chats.map((chat, i) => (\r\n          <Message\r\n            key={`chat ${i}`}\r\n            chat={chat}\r\n            togglePrivateMessage={togglePrivateMessage}\r\n          />\r\n        ))}\r\n      </Styled.Chats>\r\n      <Styled.Form onSubmit={onSubmitHandler}>\r\n        <Styled.Text>\r\n          {joinedUser ? (\r\n            <Text type=\"private-message\" onClick={onClickHandler}>\r\n              {joinedUser.userName} 에게\r\n            </Text>\r\n          ) : (\r\n            <Text type=\"white\">모두에게</Text>\r\n          )}\r\n        </Styled.Text>\r\n        <Styled.Input>\r\n          <Input ref={ref} type=\"text\" />\r\n        </Styled.Input>\r\n        <Styled.Button>\r\n          <Button>\r\n            <Text type=\"white\">입력</Text>\r\n          </Button>\r\n        </Styled.Button>\r\n      </Styled.Form>\r\n    </Styled.ChatArea>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Users = styled.div`\r\n  width: 20%;\r\n  height: 100%;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  background: #222;\r\n`;\r\n\r\nexport const ChatTools = styled.div`\r\n  width: 80%;\r\n  height : 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  .button-container {\r\n    display : flex;\r\n    justify-content : flex-end;\r\n    height : 30px;\r\n    button {\r\n      display: inline-block;\r\n      width: fit-content;\r\n      background: transparent;\r\n      border 1px solid #666;\r\n      border-radius : 3px;\r\n      padding : .1rem .3rem;\r\n      cursor : pointer;\r\n      margin-left : .3rem;\r\n    }\r\n  }\r\n`;\r\n","import { ReactElement } from \"react\";\r\nimport { User, Chat } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface InterfaceProps<T> {\r\n  joinedUser: T | null;\r\n  toggleJoinedUser(T: string): void;\r\n  sendMessage(T: string): void;\r\n  chats: any[];\r\n  users: T[];\r\n  children: ReactElement;\r\n}\r\n\r\nfunction Interface<T extends { userID: string }>(props: InterfaceProps<T>) {\r\n  return (\r\n    <>\r\n      <Styled.Users className=\"users\">\r\n        {props.users?.map(user => (\r\n          <User\r\n            key={user.userID}\r\n            user={user}\r\n            togglePrivateMessage={props.toggleJoinedUser}\r\n            joinedUser={props.joinedUser}\r\n          />\r\n        ))}\r\n      </Styled.Users>\r\n      <Styled.ChatTools>\r\n        {props.children}\r\n        <Chat\r\n          chats={props.chats}\r\n          sendMessage={props.sendMessage}\r\n          joinedUser={props.joinedUser}\r\n          togglePrivateMessage={props.toggleJoinedUser}\r\n        />\r\n      </Styled.ChatTools>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Interface;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Message = styled.article<{ type: string }>`\r\n  cursor: ${({ type }) => (type !== \"ancounce\" ? \" pointer\" : \"normal\")};\r\n`;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport { Text } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface MessageProps<T> {\r\n  chat: T;\r\n  togglePrivateMessage(T: string | null): void;\r\n}\r\n\r\nfunction Message<\r\n  T extends Partial<{\r\n    content: string;\r\n    from: { [key: string]: string };\r\n    to: { [key: string]: string };\r\n    fromSelf: string;\r\n  }>\r\n>({ chat, togglePrivateMessage }: MessageProps<T>) {\r\n  const { content, from, to, fromSelf } = chat;\r\n  const [title, type] = useMemo(() => {\r\n    if (!to && !from) return [\"공지\", \"anounce-message\"];\r\n    if (!to) return [from?.userName, \"public-message\"];\r\n    if (fromSelf) return [`당신이 ${to.userName}에게`, \"private-message\"];\r\n    if (!fromSelf) return [`${from?.userName}님이 당신에게`, \"private-message\"];\r\n    return [null, \"public\"];\r\n  }, [from, to, fromSelf]);\r\n\r\n  const handleToggleMessageType = useCallback(() => {\r\n    if (!to || !from) return;\r\n    const id = fromSelf ? to.userID : from.userID;\r\n    togglePrivateMessage(id);\r\n  }, [togglePrivateMessage, fromSelf, from, to]);\r\n\r\n  return (\r\n    <Styled.Message type={type} onClick={handleToggleMessageType}>\r\n      <Text type={type}>\r\n        <b>{title}</b> : {content}\r\n      </Text>\r\n    </Styled.Message>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Room = styled.article<{ isJoined: boolean }>`\r\n  width : calc(98% / 3);\r\n  height : fit-content;\r\n  border : 1px solid;\r\n  border-color : ${({ isJoined }) => (isJoined ? \"tomato\" : \"#444\")}}\r\n  border-radius : 3px;\r\n  margin-right : 1%;\r\n  padding : .2rem .4rem;\r\n  cursor : pointer;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    width: calc(98% / 2);\r\n  }\r\n\r\n  * {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n`;\r\n\r\nexport const RoomInfo = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const HasNewMessagesages = styled.div`\r\n  background-color: purple;\r\n  padding: 0.1rem 0.3rem;\r\n  border-radius: 3px;\r\n  font-size: 0.85rem;\r\n`;\r\n","import { useCallback, useMemo } from \"react\";\r\nimport { Text } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface IRoom {\r\n  isJoined: boolean;\r\n  roomID: string;\r\n  users: { userName: string }[];\r\n  roomName: string;\r\n  hasNewMessages: number;\r\n}\r\n\r\ninterface RoomProps<T> {\r\n  room: T;\r\n  enterRoom(T: string): void;\r\n  joinRoom(T: string): void;\r\n}\r\n\r\nfunction Room<T extends IRoom>({ room, enterRoom, joinRoom }: RoomProps<T>) {\r\n  const joinRoomHandler = useCallback(() => {\r\n    if (room.isJoined) return enterRoom(room.roomID);\r\n    joinRoom(room.roomID);\r\n  }, [enterRoom, joinRoom, room]);\r\n\r\n  const [primaryUser, size] = useMemo(() => {\r\n    if (!room.isJoined) return [null, null];\r\n    const primary = room.users[0].userName;\r\n    const size = room.users.length < 2 ? null : room.users.length - 1;\r\n    return [primary, size];\r\n  }, [room.users, room.isJoined]);\r\n\r\n  return (\r\n    <Styled.Room isJoined={room.isJoined} onClick={joinRoomHandler}>\r\n      <Text>{room.roomName}</Text>\r\n      {room.isJoined ? (\r\n        <Styled.RoomInfo>\r\n          <Text>\r\n            {primaryUser} {size && `+${size}`}\r\n          </Text>\r\n          {room.hasNewMessages !== 0 && (\r\n            <Styled.HasNewMessagesages>\r\n              <Text type=\"white\">{room.hasNewMessages}</Text>\r\n            </Styled.HasNewMessagesages>\r\n          )}\r\n        </Styled.RoomInfo>\r\n      ) : (\r\n        <Text>대화방에 참여하세요!</Text>\r\n      )}\r\n    </Styled.Room>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n","import styled from \"styled-components\";\r\n\r\nexport const User = styled.article<{ isPrivate: boolean }>`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-item: center;\r\n  ${({ isPrivate }) =>\r\n    isPrivate\r\n      ? \"background-color : #fff; color : black\"\r\n      : \"background-color : transparent; color : #f2f2f2\"};\r\n  padding: 0.2rem 0.4rem;\r\n`;\r\n\r\nexport const HasNewMessages = styled.div`\r\n  background-color: purple;\r\n  padding: 0.1rem 0.3rem;\r\n  border-radius: 3px;\r\n  font-size: 0.85rem;\r\n`;\r\n","import { useCallback } from \"react\";\r\nimport { Text } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface IUser {\r\n  userID: string;\r\n  userName: string;\r\n  messages: {\r\n    hasNewMessages: number;\r\n  };\r\n}\r\n\r\ninterface UserProps<T> {\r\n  user: T;\r\n  togglePrivateMessage(T: string): void;\r\n  joinedUser: T | null;\r\n}\r\n\r\nfunction User<T extends Partial<IUser>>({\r\n  user,\r\n  togglePrivateMessage,\r\n  joinedUser,\r\n}: UserProps<T>) {\r\n  const onClickHandler = useCallback(() => {\r\n    if (!user.userID) return;\r\n    togglePrivateMessage(user.userID);\r\n  }, [togglePrivateMessage, user]);\r\n\r\n  return (\r\n    <Styled.User\r\n      isPrivate={user.userID === joinedUser?.userID}\r\n      onClick={onClickHandler}\r\n    >\r\n      <Text>{user.userName}</Text>\r\n      {user.messages && user.messages.hasNewMessages !== 0 && (\r\n        <Styled.HasNewMessages>\r\n          <Text type=\"white\">{user.messages.hasNewMessages}</Text>\r\n        </Styled.HasNewMessages>\r\n      )}\r\n    </Styled.User>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button<{ border: string }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: none;\r\n  cursor: pointer;\r\n  padding: 0.3rem 0.2rem;\r\n\r\n  ${({ theme, border }) => theme.button[border]}\r\n`;\r\n","import { ButtonHTMLAttributes } from \"react\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  border?: string;\r\n}\r\n\r\nfunction Button({ border = \"borderless\", children, ...props }: ButtonProps) {\r\n  return (\r\n    <Styled.Button border={border} {...props}>\r\n      {children}\r\n    </Styled.Button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 0;\r\n  padding: 0.2rem 0.4rem;\r\n  outline: none;\r\n  border-radius: 6px;\r\n`;\r\n","import { forwardRef, InputHTMLAttributes } from \"react\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = forwardRef<HTMLInputElement, InputProps>(({ ...props }, ref) => (\r\n  <Styled.Input ref={ref} {...props} />\r\n));\r\n\r\nexport default Input;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Text = styled.div<{ type?: string }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  ${({ theme, type = \"default\" }) => theme.font[type]}\r\n`;\r\n","import { HTMLAttributes } from \"react\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface TextProps extends HTMLAttributes<HTMLDivElement> {\r\n  type?: string;\r\n}\r\n\r\nfunction Text({ children, type, ...props }: TextProps) {\r\n  return (\r\n    <Styled.Text type={type} {...props}>\r\n      {children}\r\n    </Styled.Text>\r\n  );\r\n}\r\n\r\nexport default Text;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Interface = styled.article`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: 40%;\r\n  }\r\n`;\r\n\r\nexport const Loby = styled.section`\r\n  height: 60%;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nexport const Buttons = styled.section`\r\n  width: 100%;\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  & button {\r\n    width: fit-content;\r\n  }\r\n`;\r\n\r\nexport const Rooms = styled.section`\r\n  height: calc(99% - 30.1px);\r\n  padding-top: 0.5rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  overflow-y: scroll;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n","import React, { useMemo } from \"react\";\r\nimport { Button, Interface, Room } from \"components\";\r\nimport { IUsers, IChat, IRooms, IUser } from \"types/socket\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface LobyProps {\r\n  users: IUsers;\r\n  chats: IChat[];\r\n  rooms: IRooms;\r\n  joinedUser: IUser | null;\r\n  toggleJoinedUser(T: string): void;\r\n  joinRoom(T: string): void;\r\n  enterRoom(T: string): void;\r\n  createRoom(): void;\r\n  sendMessage(T: string): void;\r\n}\r\n\r\nfunction Loby({\r\n  users,\r\n  chats,\r\n  rooms,\r\n  joinedUser,\r\n  toggleJoinedUser,\r\n  joinRoom,\r\n  enterRoom,\r\n  createRoom,\r\n  sendMessage,\r\n}: LobyProps) {\r\n  const iterableRooms = useMemo(\r\n    () =>\r\n      Object.values(rooms).sort(a => {\r\n        if (a.isJoined) return -1;\r\n        return 0;\r\n      }),\r\n    [rooms]\r\n  );\r\n  const iterableUsers = useMemo(\r\n    () =>\r\n      Object.values(users).sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.messages.recent > b.messages.recent) return -1;\r\n        return 0;\r\n      }),\r\n    [users]\r\n  );\r\n\r\n  return (\r\n    <Styled.Interface>\r\n      <Interface\r\n        joinedUser={joinedUser}\r\n        toggleJoinedUser={toggleJoinedUser}\r\n        sendMessage={sendMessage}\r\n        chats={chats}\r\n        users={iterableUsers}\r\n      >\r\n        <Styled.Loby>\r\n          <Styled.Buttons>\r\n            <Button border=\"border\" onClick={createRoom}>\r\n              방 만들기\r\n            </Button>\r\n          </Styled.Buttons>\r\n          <Styled.Rooms>\r\n            {iterableRooms.map(room => (\r\n              <Room\r\n                key={room.roomID}\r\n                room={room}\r\n                enterRoom={enterRoom}\r\n                joinRoom={joinRoom}\r\n              />\r\n            ))}\r\n          </Styled.Rooms>\r\n        </Styled.Loby>\r\n      </Interface>\r\n    </Styled.Interface>\r\n  );\r\n}\r\n\r\nexport default React.memo(Loby);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Login = styled.section`\r\n  width: 300px;\r\n  position: relative;\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  text-align: center;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  height: 30px;\r\n`;\r\n\r\nexport const Input = styled.div`\r\n  display: inline-block;\r\n  width: 80%;\r\n  border-bottom: 1px solid #222;\r\n  outline: none;\r\n  padding: 0.1rem 0.3rem;\r\n`;\r\n\r\nexport const Button = styled.div`\r\n  display: inline-block;\r\n  width: 20%;\r\n  padding: 0.1rem 0.3rem;\r\n  height: 100%;\r\n`;\r\n","import React, { useCallback, useRef } from \"react\";\r\nimport { Input, Button, Text } from \"components\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface Props {\r\n  connectSocket(T: string): void;\r\n}\r\n\r\nconst Login = ({ connectSocket }: Props) => {\r\n  const ref = useRef<HTMLInputElement>(null);\r\n  const handleOnSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const userName = ref?.current?.value;\r\n      if (userName) connectSocket(userName);\r\n    },\r\n    [connectSocket, ref]\r\n  );\r\n\r\n  return (\r\n    <Styled.Login>\r\n      <Styled.Title>Web Chat</Styled.Title>\r\n      <Styled.Form onSubmit={handleOnSubmit}>\r\n        <Styled.Input>\r\n          <Input\r\n            ref={ref}\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"user name...\"\r\n          />\r\n        </Styled.Input>\r\n        <Styled.Button>\r\n          <Button border=\"border\">입장</Button>\r\n        </Styled.Button>\r\n      </Styled.Form>\r\n    </Styled.Login>\r\n  );\r\n};\r\n\r\nexport default React.memo(Login);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Interface = styled.article`\r\n  display: flex;\r\n  height: 100%;\r\n  .chat-area {\r\n    height: calc(100% - 46.1px);\r\n  }\r\n`;\r\n\r\nexport const RoomLoby = styled.section`\r\n  padding: 0.5rem;\r\n  height: fit-content;\r\n`;\r\n\r\nexport const Buttons = styled.section`\r\n  width: 100%;\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  & button {\r\n    width: fit-content;\r\n    margin-left: 0.3rem;\r\n  }\r\n`;\r\n","import React, { useCallback } from \"react\";\r\nimport { Interface, Button } from \"components\";\r\nimport { IUser, IRoom } from \"types/socket\";\r\nimport * as Styled from \"./index.style\";\r\n\r\ninterface RoomLobyProps {\r\n  joinedRoom: IRoom;\r\n  joinedUser: IUser | null;\r\n  leaveRoom(T: string): void;\r\n  goLoby(): void;\r\n  toggleJoinedUser(T: string): void;\r\n  sendMessage(T: string): void;\r\n}\r\n\r\nfunction RoomLoby({\r\n  joinedRoom,\r\n  joinedUser,\r\n  leaveRoom,\r\n  goLoby,\r\n  toggleJoinedUser,\r\n  sendMessage,\r\n}: RoomLobyProps) {\r\n  const handleLeaveRoom = useCallback(() => {\r\n    leaveRoom(joinedRoom.roomID);\r\n  }, [leaveRoom, joinedRoom]);\r\n\r\n  return (\r\n    <Styled.Interface>\r\n      <Interface\r\n        joinedUser={joinedUser}\r\n        toggleJoinedUser={toggleJoinedUser}\r\n        sendMessage={sendMessage}\r\n        chats={joinedRoom.messages}\r\n        users={joinedRoom.users}\r\n      >\r\n        <Styled.RoomLoby>\r\n          <Styled.Buttons>\r\n            <Button border=\"border\" onClick={handleLeaveRoom}>\r\n              나가기\r\n            </Button>\r\n            <Button border=\"border\" onClick={goLoby}>\r\n              로비로 이동\r\n            </Button>\r\n          </Styled.Buttons>\r\n        </Styled.RoomLoby>\r\n      </Interface>\r\n    </Styled.Interface>\r\n  );\r\n}\r\n\r\nexport default React.memo(RoomLoby);\r\n","import { io, Socket } from \"socket.io-client\";\r\ninterface ISocet extends Socket {\r\n  userID?: string;\r\n}\r\n\r\nconst url = \"https://web-chat-sangmin-server.herokuapp.com/web-chat\";\r\n// const url = \"http://localhost:3001/web-chat\";\r\n\r\nexport const socket: ISocet = io(url, { autoConnect: false });\r\n\r\nsocket.onAny((event, ...args) => {\r\n  // console.log(event, args);\r\n});\r\n","import * as Types from \"types/socket\";\r\n\r\n// user\r\nexport const USER_CONNECTED = \"USER_CONNECTED\";\r\nexport const USER_DISCONNECTED = \"USER_DISCONNECTED\";\r\nexport const TOGGLE_JOINED_USER = \"TOGGLE_JOINED_USER\";\r\n\r\n// room\r\nexport const LEAVE_ROOM = \"LEAVE_ROOM\";\r\nexport const JOIN_ROOM = \"JOIN_ROOM\";\r\nexport const CREATE_ROOM = \"CREATE_ROOM\";\r\nexport const DELETE_ROOM = \"DELETE_ROOM\";\r\nexport const ENTER_ROOM = \"ENTER_ROOM\";\r\n\r\n// user+room\r\nexport const SET_USERS_ROOMS = \"SET_USERS_ROOMS\";\r\n\r\n// message\r\nexport const PRIVATE_MESSAGE = \"PRIVATE_MESSAGE\";\r\nexport const PUBLIC_MESSAGE = \"PUBLIC_MESSAGE\";\r\nexport const ROOM_MESSAGE = \"ROOM_MESSAGE\";\r\n\r\nexport type ReducerAction =\r\n  | { type: typeof USER_CONNECTED; user: Types.IUser }\r\n  | { type: typeof USER_DISCONNECTED; userID: string; userName: string }\r\n  | { type: typeof TOGGLE_JOINED_USER; userID: string }\r\n  | {\r\n      type: typeof LEAVE_ROOM;\r\n      roomID: string;\r\n      roomUsers: Types.IUser[];\r\n      userID: string;\r\n      userName: string;\r\n      users: Types.IUser[];\r\n      rooms: Types.IRoom[];\r\n    }\r\n  | {\r\n      type: typeof JOIN_ROOM;\r\n      roomID: string;\r\n      userID: string;\r\n      roomUsers: Types.IUser[];\r\n      userName: string;\r\n    }\r\n  | { type: typeof CREATE_ROOM; room: Types.IRoom }\r\n  | { type: typeof DELETE_ROOM; roomID: string }\r\n  | { type: typeof ENTER_ROOM; roomID: string }\r\n  | { type: typeof SET_USERS_ROOMS; rooms: Types.IRoom[]; users: Types.IUser[] }\r\n  | { type: typeof PRIVATE_MESSAGE; message: Required<Types.IChat> }\r\n  | { type: typeof PUBLIC_MESSAGE; message: Types.IChat }\r\n  | { type: typeof ROOM_MESSAGE; message: Types.IChat; roomID: string };\r\n","import * as Types from \"types/socket\";\r\nimport { socket } from \"./index\";\r\nimport * as Action from \"./action\";\r\n\r\nexport const initialState: Types.IReducer = {\r\n  chats: [],\r\n  users: {},\r\n  rooms: {},\r\n  joinedRoomID: null,\r\n  joinedUser: null,\r\n};\r\n\r\nexport function socketReducer(\r\n  state: Types.IReducer,\r\n  action: Action.ReducerAction\r\n) {\r\n  switch (action.type) {\r\n    case Action.SET_USERS_ROOMS: {\r\n      const { rooms, users } = action;\r\n      const newRooms: Types.IRooms = {};\r\n      const newUsers: Types.IUsers = {};\r\n      rooms.forEach((room: Types.IRoom) => {\r\n        if (state.rooms[room.roomID])\r\n          newRooms[room.roomID] = state.rooms[room.roomID];\r\n        if (!state.rooms[room.roomID]) newRooms[room.roomID] = room;\r\n      });\r\n      users.forEach((user: Types.IUser) => {\r\n        if (state.users[user.userID])\r\n          newUsers[user.userID] = state.users[user.userID];\r\n        if (!state.users[user.userID]) newUsers[user.userID] = user;\r\n      });\r\n      return { ...state, users: newUsers, rooms: newRooms, joinedRoomID: null };\r\n    }\r\n    case Action.ENTER_ROOM: {\r\n      const { roomID } = action;\r\n      const newRooms = { ...state.rooms };\r\n      newRooms[roomID] = { ...state.rooms[roomID], hasNewMessages: 0 };\r\n      return { ...state, rooms: newRooms, joinedRoomID: roomID };\r\n    }\r\n    case Action.JOIN_ROOM: {\r\n      const { roomID, userID, roomUsers, userName } = action;\r\n      const targetRoom = { ...state.rooms[roomID] };\r\n      const joinSelf = socket.userID === userID;\r\n      targetRoom.isJoined = true;\r\n      const newUsers = roomUsers.map((roomUser: Types.IUser) => {\r\n        roomUser.self = false;\r\n        if (roomUser.userID === socket.userID) roomUser.self = true;\r\n        return roomUser;\r\n      });\r\n\r\n      targetRoom.users = newUsers;\r\n      targetRoom.messages.push({\r\n        content: `${userName}님이 입장하셨습니다.`,\r\n      });\r\n      const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n      return {\r\n        ...state,\r\n        rooms: newRooms,\r\n        joinedRoomID: joinSelf ? roomID : state.joinedRoomID,\r\n      };\r\n    }\r\n    case Action.LEAVE_ROOM: {\r\n      const { roomID, roomUsers, userID, userName, users, rooms } = action;\r\n      if (socket.userID === userID) {\r\n        const newRooms: Types.IRooms = {};\r\n        const newUsers: Types.IUsers = {};\r\n        rooms.forEach((room: Types.IRoom) => {\r\n          if (state.rooms[room.roomID])\r\n            newRooms[room.roomID] = state.rooms[room.roomID];\r\n          if (!state.rooms[room.roomID]) newRooms[room.roomID] = room;\r\n        });\r\n        users.forEach((user: Types.IUser) => {\r\n          if (state.users[user.userID])\r\n            newUsers[user.userID] = state.users[user.userID];\r\n          if (!state.users[user.userID]) newUsers[user.userID] = user;\r\n        });\r\n        return {\r\n          ...state,\r\n          rooms: newRooms,\r\n          users: newUsers,\r\n          joinedRoomID: null,\r\n        };\r\n      } else {\r\n        const targetRoom = { ...state.rooms[roomID] };\r\n        targetRoom.users = roomUsers;\r\n        targetRoom.messages.push({\r\n          content: `${userName}님이 퇴장하셨습니다.`,\r\n        });\r\n        const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n        return { ...state, rooms: newRooms };\r\n      }\r\n    }\r\n    case Action.ROOM_MESSAGE: {\r\n      const { message, roomID } = action;\r\n      const targetRoom = { ...state.rooms[roomID] };\r\n      const newMessages = [...targetRoom.messages, message];\r\n      targetRoom.messages = newMessages;\r\n      if (!state.joinedRoomID) targetRoom.hasNewMessages++;\r\n      const newRooms = { ...state.rooms, [roomID]: targetRoom };\r\n      return { ...state, rooms: newRooms };\r\n    }\r\n    case Action.PRIVATE_MESSAGE: {\r\n      const { message } = action;\r\n      const fromSelf = message.from.userID === socket.userID ? true : false;\r\n      const newRooms = { ...state.rooms };\r\n      const newChats = [...state.chats];\r\n      const newUsers = { ...state.users };\r\n      const targetUser = newUsers[message.from?.userID];\r\n\r\n      newChats.push({ ...message, fromSelf });\r\n\r\n      if (state.joinedRoomID) {\r\n        const targetRoom = { ...newRooms[state.joinedRoomID] };\r\n        targetRoom.messages.push({ ...message, fromSelf });\r\n        newRooms[state.joinedRoomID] = targetRoom;\r\n      }\r\n\r\n      if (!fromSelf && state.joinedUser?.userID !== targetUser.userID) {\r\n        targetUser.messages.hasNewMessages++;\r\n        targetUser.messages.recent = new Date();\r\n      }\r\n      return { ...state, rooms: newRooms, chats: newChats, users: newUsers };\r\n    }\r\n    case Action.PUBLIC_MESSAGE: {\r\n      const { message } = action;\r\n      const newChats = [...state.chats, { ...message }];\r\n      return { ...state, chats: newChats };\r\n    }\r\n    case Action.TOGGLE_JOINED_USER: {\r\n      const { userID } = action;\r\n      const user = state.users[userID];\r\n      const newJoineduser =\r\n        state.joinedUser?.userID === userID ? null : { ...user };\r\n      const newUsers = { ...state.users };\r\n      newUsers[userID].messages.hasNewMessages = 0;\r\n      return { ...state, users: newUsers, joinedUser: newJoineduser };\r\n    }\r\n    case Action.USER_CONNECTED: {\r\n      const { user } = action;\r\n      const newUsers = { ...state.users, [user.userID]: user };\r\n      const newChats = [\r\n        ...state.chats,\r\n        { content: `${user.userName}님이 입장하셨습니다.` },\r\n      ];\r\n      return { ...state, users: newUsers, chats: newChats };\r\n    }\r\n    case Action.USER_DISCONNECTED: {\r\n      const { userID, userName } = action;\r\n      const newChats = [...state.chats];\r\n      const newUsers: Types.IUsers = {};\r\n      const userVals: any = Object.values(state.users);\r\n      const isQuit = state.joinedUser?.userID === userID ? true : false;\r\n      let newJoinedUser = state.joinedUser;\r\n      let content = `${userName}님이 퇴장하셨습니다.`;\r\n      if (isQuit) {\r\n        content = `귓속말 대상인 ${userName}님이 퇴장하셨습니다.`;\r\n        newJoinedUser = null;\r\n      }\r\n      newChats.push({ content });\r\n      userVals.forEach((user: any) => {\r\n        if (user.userID !== userID) newUsers[user.userID] = user;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        chats: newChats,\r\n        users: newUsers,\r\n        joinedUser: newJoinedUser,\r\n      };\r\n    }\r\n    case Action.CREATE_ROOM: {\r\n      const { room } = action;\r\n      const newJoinedRoomID =\r\n        room.creater === socket.userID ? room.roomID : state.joinedRoomID;\r\n      const isJoined = room.creater === socket.userID ? true : false;\r\n      room.isJoined = isJoined;\r\n      const newRooms = { ...state.rooms, [room.roomID]: room };\r\n      return { ...state, rooms: newRooms, joinedRoomID: newJoinedRoomID };\r\n    }\r\n    case Action.DELETE_ROOM: {\r\n      const { roomID } = action;\r\n      const newRooms: Types.IRooms = {};\r\n      const roomVals: Types.IRoom[] = Object.values(state.rooms);\r\n      roomVals.forEach(room => {\r\n        if (room.roomID === roomID) return;\r\n        newRooms[room.roomID] = room;\r\n      });\r\n      return { ...state, rooms: newRooms };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const App = styled.div`\r\n  max-width: 900px;\r\n  min-width: 300px;\r\n  margin: 0 auto;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const Main = styled.main`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import { useCallback, useState } from \"react\";\r\nimport { Loby, Login, RoomLoby } from \"pages\";\r\nimport { useSocket } from \"hooks/useSocket\";\r\nimport * as Styled from \"./app.style\";\r\n\r\nfunction App() {\r\n  const [isLogin, setLogin] = useState(false);\r\n  const SI = useSocket(setLogin);\r\n  const { chats, users, rooms, joinedRoomID, joinedUser } = SI.state;\r\n\r\n  const handleSendMessage = useCallback(\r\n    content => {\r\n      if (joinedUser)\r\n        return SI.handleSendPrivateMessage({ content, to: joinedUser });\r\n      if (joinedRoomID)\r\n        return SI.handleSendRoomMessage({ content, roomID: joinedRoomID });\r\n      return SI.handleSendPublicMessage(content);\r\n    },\r\n    [joinedUser, joinedRoomID]\r\n  );\r\n\r\n  return (\r\n    <Styled.App>\r\n      <Styled.Main>\r\n        {!isLogin && <Login connectSocket={SI.handleConnectSocket} />}\r\n        {isLogin && joinedRoomID && (\r\n          <RoomLoby\r\n            joinedRoom={rooms[joinedRoomID]}\r\n            joinedUser={joinedUser}\r\n            leaveRoom={SI.handleLeaveRoom}\r\n            goLoby={SI.handleGoLoby}\r\n            toggleJoinedUser={SI.handleToggleJoinedUser}\r\n            sendMessage={handleSendMessage}\r\n          />\r\n        )}\r\n        {isLogin && !joinedRoomID && (\r\n          <Loby\r\n            users={users}\r\n            chats={chats}\r\n            rooms={rooms}\r\n            joinedUser={joinedUser}\r\n            toggleJoinedUser={SI.handleToggleJoinedUser}\r\n            joinRoom={SI.handleJoinRoom}\r\n            enterRoom={SI.handleEnterRoom}\r\n            createRoom={SI.handleCreateRoom}\r\n            sendMessage={handleSendMessage}\r\n          />\r\n        )}\r\n      </Styled.Main>\r\n    </Styled.App>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useReducer, useCallback, Reducer, useEffect } from \"react\";\r\nimport { socket } from \"socket/index\";\r\nimport * as Action from \"socket/action\";\r\nimport { socketReducer, initialState } from \"socket/reducer\";\r\nimport { ReducerAction } from \"socket/action\";\r\n\r\nexport function useSocket(\r\n  setLogin: React.Dispatch<React.SetStateAction<boolean>>\r\n) {\r\n  const [state, setState] = useReducer<\r\n    Reducer<typeof initialState, ReducerAction>\r\n  >(socketReducer, initialState);\r\n  const { joinedRoomID } = state;\r\n\r\n  const handleGoLoby = useCallback(() => {\r\n    socket.emit(\"go loby\");\r\n  }, []);\r\n\r\n  const handleToggleJoinedUser = useCallback(userID => {\r\n    if (userID === socket.userID) return;\r\n    setState({ type: Action.TOGGLE_JOINED_USER, userID });\r\n  }, []);\r\n\r\n  const handleSendRoomMessage = useCallback(({ content, roomID }) => {\r\n    socket.emit(\"room message\", { content, roomID });\r\n  }, []);\r\n\r\n  const handleSendPrivateMessage = useCallback(content => {\r\n    socket.emit(\"private message\", content);\r\n  }, []);\r\n\r\n  const handleSendPublicMessage = useCallback(content => {\r\n    socket.emit(\"public message\", content);\r\n  }, []);\r\n\r\n  const handleCreateRoom = useCallback(() => {\r\n    socket.emit(\"create room\");\r\n  }, []);\r\n\r\n  const handleJoinRoom = useCallback(roomID => {\r\n    socket.emit(\"join room\", roomID);\r\n  }, []);\r\n\r\n  const handleEnterRoom = useCallback(roomID => {\r\n    setState({ type: Action.ENTER_ROOM, roomID });\r\n  }, []);\r\n\r\n  const handleLeaveRoom = useCallback(roomID => {\r\n    socket.emit(\"leave room\", roomID);\r\n  }, []);\r\n\r\n  const handleConnectSocket = useCallback(\r\n    userName => {\r\n      setLogin(true);\r\n      socket.auth = { userName };\r\n      socket.connect();\r\n    },\r\n    [setLogin]\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket.on(\"session\", userID => {\r\n      socket.userID = userID;\r\n    });\r\n\r\n    socket.on(\"users rooms\", ({ users, rooms }) => {\r\n      setState({ type: Action.SET_USERS_ROOMS, users, rooms });\r\n    });\r\n\r\n    socket.on(\"join room\", ({ roomUsers, userID, userName, roomID }) => {\r\n      setState({ type: Action.JOIN_ROOM, roomUsers, userID, userName, roomID });\r\n    });\r\n\r\n    socket.on(\r\n      \"leave room\",\r\n      ({ roomUsers, userID, userName, roomID, users, rooms }) => {\r\n        setState({\r\n          type: Action.LEAVE_ROOM,\r\n          roomUsers,\r\n          userID,\r\n          userName,\r\n          roomID,\r\n          users,\r\n          rooms,\r\n        });\r\n      }\r\n    );\r\n\r\n    socket.on(\"room message\", ({ message, roomID }) => {\r\n      setState({ type: Action.ROOM_MESSAGE, message, roomID });\r\n    });\r\n\r\n    socket.on(\"private message\", message => {\r\n      setState({ type: Action.PRIVATE_MESSAGE, message });\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!joinedRoomID) {\r\n      socket.on(\"room created\", room => {\r\n        setState({ type: Action.CREATE_ROOM, room });\r\n      });\r\n\r\n      socket.on(\"delete room\", roomID => {\r\n        setState({ type: Action.DELETE_ROOM, roomID });\r\n      });\r\n\r\n      socket.on(\"public message\", message => {\r\n        setState({ type: Action.PUBLIC_MESSAGE, message });\r\n      });\r\n\r\n      socket.on(\"user connected\", user => {\r\n        setState({ type: Action.USER_CONNECTED, user });\r\n      });\r\n\r\n      socket.on(\"user disconnected\", ({ userID, userName }) => {\r\n        setState({ type: Action.USER_DISCONNECTED, userID, userName });\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      socket.off(\"room created\");\r\n      socket.off(\"delete room\");\r\n      socket.off(\"public message\");\r\n      socket.off(\"user connected\");\r\n      socket.off(\"user disconnected\");\r\n    };\r\n  }, [joinedRoomID]);\r\n\r\n  return {\r\n    state,\r\n    handleGoLoby,\r\n    handleEnterRoom,\r\n    handleToggleJoinedUser,\r\n    handleSendRoomMessage,\r\n    handleSendPrivateMessage,\r\n    handleSendPublicMessage,\r\n    handleCreateRoom,\r\n    handleJoinRoom,\r\n    handleLeaveRoom,\r\n    handleConnectSocket,\r\n  };\r\n}\r\n","import { createGlobalStyle, css } from \"styled-components\";\r\n\r\nexport const THEME = {\r\n  font: {\r\n    white: css`\r\n      color: #fff;\r\n    `,\r\n    \"private-message\": css`\r\n      color: rgba(245, 81, 226, 1);\r\n    `,\r\n    \"anounce-message\": css`\r\n      color: green;\r\n    `,\r\n  },\r\n  button: {\r\n    borderless: css`\r\n      border: 0;\r\n    `,\r\n    border: css`\r\n      border: 1px solid black;\r\n      border-radius: 3px;\r\n    `,\r\n  },\r\n};\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport GlobalStyle, { THEME } from \"styles/globalStyle\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <ThemeProvider theme={THEME}>\r\n    <GlobalStyle />\r\n    <App />\r\n  </ThemeProvider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}